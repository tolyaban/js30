[00:00] [music]

[00:02] Wes Bos: To understand classes, let's take this dog function here, which refused to create Snickers and Sunny, and turn that into an ES6 class. There's two ways to make a class in ES6. There's a class declaration and a class expression. 

[00:15] A class declaration simply goes, you write the keyword class, and then you type the name of the class, dog, and then you open up the class block.

[00:24] A class expression looks like this, const dog = class, and you open and close your class block. Very similar to how you can stick a function inside of a variable, or you can just go ahead and declare the actual function itself. I much prefer to this first right here. Their use case is for this, but we'll go ahead and use class dog here. 

[00:46] Inside of the body of your class, there are a bunch of methods. The only method that is absolutely required when you're building a class is what's called a constructor. That is what happens when someone creates a new version. We'll say constructor. Now, you notice that I didn't say constructor function. It's constructor open close parenthesis, open close your actual block.

[01:10] All of your methods that live inside of a class are going to look exactly like that. It's exactly the same as our object shorthand from methods, that we were showing earlier in our object improvement video. 

[01:21] Now, that constructor video gets called when someone makes a new one. What is it going to take? It's going to take a name, because we pass it the name, and it's going to take a breed, because we pass it the breed. 

[01:30] We can just take these two parameters, pop them in there, and the same goes for the code that happens when something is created. We'll say this.name = whatever they pass the name, and this.breed is whatever they passed in as the breed. Now we're done that part here.

[01:45] We need to now work on these prototype methods, bark and cuddle. We can go into here, and you might think you do this, comma bark, open close. That is almost right, but you do not need this comma, or you cannot have this comma here. Whenever you have a method inside of a class, do not put a comma. It might seem weird to you, but that's just the syntax. If you have one there, it's going to break. 

[02:12] We'll give ourselves that method there. Then inside of the bark, you can just move this. Console.log, bark, bark, my name is this.name. Same goes for the cuddle method. Of course, if your method had any parameters, you could put them in here, but we don't in this case. I'm going to move it up into there.

[02:32] That should create a dog, which we are allowed to call new against, and we should pass it Snickers and King Charles. If I say that and refresh, I should be able to call all the methods I previously was. We'll say Snickers is a dog, Sunny is a dog. snickers.bark and sunny.bark. Good.

[02:53] That is a very basics of a class. However there are quite a few more things that we can learn about it. There's one thing called a static method. In order to understand what a static method is, think back to when we were working with array.from and array.of. 

[03:10] You know that we have array.from which will create an array out of something like a NodeList or arguments. You know that we have array.of, which only lives on top of array. 

[03:24] If I create, and say array.of one, two, three, four, that will create as an array, but that of is not a method on every single array. If I create myself a new array names = Wes and Kate, I don't have names.of. That's not a method. That's because it only lives on array directly. It's not inherited by all of them.

[03:46] If we also wanted something similar to that for our dog, maybe like info, we could say static info. What that would do is console.log some information...a dog is better than a cat by 10 times. It's probably low, but we can work with it. Now, if I say Sunny and I say sunny.info, it doesn't work. 

[04:12] Why not? Because Sunny is an instance of dog. How do I get this info? Because it is a static method, we can only call it on dog directly. Then we get the information. That's a static method that lives inside of it. 

[04:28] We can also use getters and setters on classes, just as you would an object. You simply say get, let's use the description. When someone asks for snickers.description, we will return this.name is a this.breed type of dog. Then we should be able to say snickers.description, and it will tell us. 

[05:00] We used a getter there. It's not a method, it's a property that is computed when you pull on it. Similarly, if you wanted to also work with a setter, say set nicknames, and we'll just say whatever the person actually passes in, which is going to be the value.

[05:21] We can say this.nick. We can't use nicknames again, because we're actually using that as a setter here, so we have to have another variable called nick. We say = value, and then I'll just trim against it. Sometimes people pass in stuff with some spaces. That's just an example of when you might want to use a setter. Give that a save.

[05:42] Say snickers.nicknames = snicky, and a whole bunch of spaces. There we go. Now we can also have a getter. Let's say snickers.nicknames won't give us anything. Why not? We haven't set a getter for it. Get nicknames = return this.nick. 

[06:08] We'll Snickers.nicknames and then snickers.nickname get, it returns us just that. Why? Because we put a setter where we trimmed it as it came in, and then a getter where we removed it. 

[06:28] We could also say like toUppercase. Then you set it as snicky with a whole bunch of spaces. You get it as uppercase Snicky. That's a setter and getter where you have the same property value. 

[06:44] That is the basics of a class. Let's look at some more advanced examples of what you can do with it.