[00:00] [music]

[00:02] Instructor: If you work on a team or an open source project with other people, it's helpful to have an ESLint file right in your Git repo, and then you can have what's called a Git hook, which will not allow anyone to commit any code, unless it first passes the ESLint rule. That's really important because than you're going to keep up code quality for everyone that touched that project.

[00:23] Let's do something from scratch here. There's no predefined folder you're going to get. We'll say git init ES6 git, and we're doing this inside of our 12th folder here. What that will do is, it should make a folder called ES6 git. We'll go into that, and you'll see that we have a clean master branch now.

[00:42] Let's go ahead and create a file that actually has some bad code in it. Code.JS, and we'll open up that file in our editor. In here, I'm going to say var x = 100. Then I'm going to leave off that. Let's do a couple bad things here. Let's go ahead and say ESLint our code, then it's going to yell at us, and and here's all the specific things.

[01:06] You'll note that we don't have an ESLint file in this folder, but it's picking the one up from the parent folder here, because that how it works. It will always check the parent until it finds one. 

[01:15] Now we're inside of ES6 Git, and I want to be able to commit these files, but before I do that, we want to make a hook for this. A lot of people don't know this, but if you were to open up the actual Git directory, watch what we get inside of here.

[01:34] There is a folder in here. There's branches and other kinds of info, but there's a folder in here called Hooks. If you open that up, there's all kinds of sample. Hooks in git are essentially code that runs before things happen, and you can stop those things from happening unless they pass a specific use case.

[01:54] In our case, if we open up the commit-message-sample, this is an example of something that will run before someone commits their code. What I want you to do is rename this one to not Git commit message-sample. Take off the .sample, rename it there, and then take out whatever we have in there, and remove it.

[02:19] Go ahead and copy everything from this file, make sure you get it all, not just forget to copy the last line. That happens a lot. Paste it in there, then we're going to go to our Git repo and say Git status. We have code.JS. I want to be able to commit it, so I say add everything. I'm going to commit it by saying "added new code."

[02:41] Then, it's going to check. It's going to run this code. Why? This is a pre-commit message. I'm about to add a commit message here. It's going to run our check and say "ESLint failed. Git commit denied." 

[02:52] Why? Because it did not pass, we got four errors here. What we have to do is go back to our code here, and we look at all the different errors. 

[03:01] First error, unexpected var. I should have used const. Then next error, X is defined but never used, so I should have said console.log X. Infix operators must be spaced. I forgot the space there, and missing semicolon. I've got to put a semicolon on the end there.

[03:20] Great. Now if I add everything that we changed, if I commit everything now, it should check against it, and look. We didn't have any problems with our ESLint, so everything went ahead, and now my maste branch is in a clean state.