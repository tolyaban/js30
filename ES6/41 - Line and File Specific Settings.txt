[00:00] [music]

Instructor: [00:03] Sometimes there are ESLint settings that are specific to a single file rather than being project or global settings. We want these things to only be specific to the file, or sometimes even the lines that we are working with. 

[00:14] Sometimes you have a setting where you're like, "There's no way around this for me, so I need to temporarily turn off that setting so I'm able to commit," or sometimes you have an external library where they are introducing global variables. Let's take a look at globals first, and then we'll go in through other settings. 

[00:31] If you have ever used Twitter or Google Analytics or Facebook, you know that the way that they work is they put a global variable in your window, like GA is for Google Analytics, and if you want to use Google Analytics you just start using the function. 

[00:45] But if we did it like this, GA.track or whatever the function is, like or Twitter's is TWTTR.trackConversion. If we start to use these things, and we were to ESLint our code, you know that we get these two things here. GA and Twitter are not defined. That's because nowhere else have we actually defined them.

[01:07] What we can do with that is set globals inside of this specific file. The way that you do that is, you go to the top, you give yourself a block comment and you say, globals TWTTR and GA. Now when I give that a save and rerun, we no longer get those errors because we've said these are two global variables that we're expecting to have inside of our window, and they're no longer going to error out. 

[01:35] You could do that as a global setting, but I prefer to just do it file by file and really just turn them off exactly where you need them.

[01:43] Let's take a look at when you might want to turn off an ESLint setting in an entire file, or even just in a couple of lines. To illustrate this, I'm going to show you something called .array.includes. This is part of ES2016 or ES7. If we want to use this in our projects, because it's really handy, we have to polyfill it. 

[02:03] We're going to learn all about polyfills, but essentially the way that it works is that if the array.prototype does not have includes method, we will just add it to the prototype. Now in general it's a no-no to modify your prototype of the built-ins like array, and number, and string. 

[02:19] However, if you're trying to be future-friendly, then you have to polyfill it, so it'll work in all of the current browsers, older browsers, and then when the browser does implement includes, we're going to be in good shape. 

[02:30] If I were doing that, I would go ahead and take this code and I would paste that in here. I would go back and rerun my ESLint here. You see that? Oh my goodness, we have so many errors. 

[02:42] First of all let's look at this first one, array.prototype is read only. Properties should not be added. That's the no-extend-native property. That makes sense. You shouldn't be just adding anything willy-nilly to the actual prototype of the array, but because this is a standard agreed-upon method that's going to be added, it's actually fine to do it.

[03:04] What we need to do is we can turn it off entirely in the file. What we do here is go back up here and make ourself another comment. We say ESLint-disable, and then we say the actual rule that we want to disable, no-extend-native. If I say ESLint-disable no-extend-native, give that a save. 

[03:27] Now we've got 19 errors here. If I rerun it again, we should only have 18 errors, good. 

[03:33] What I just did there is I disabled it for the entire file, or all of the code that comes after it. If this was a big file, then I might not want to disable for the entire file. I might want to just disable it for single line. I'll show you how to do that next.

[03:50] Really, what you should do is, "I know, I know, I shouldn't be doing this, but I'm just going to disable it for this one line here, and then the line right after it, I'm going to enable that rule right again." 

[04:03] What that does is it will stop it, ignore that the error that is on here, only ignore this error, and then keep going so if I were to do it anywhere else in this file it would still yell at me. 

[04:14] I'm going to save it. It should still give me 18 errors. There we go, no problem there. However, we got all kinds of different errors here, and that's because I just included this polyfill. It's code that someone else wrote, and while maybe I should fix it, I know that it works fine in there's no issue with it.

[04:31] What we could do is just ignore this entire block. The only way we would do that is, rather than just commenting out this one line here, you go up and you call ESlint-disable, then you take that comment, and where it ends you enable it again. 

[04:50] That will just ignore absolutely every single rule in between these two comments. If re-run our ESLint code now, you see if we get no errors because I've ignored all the code in between it.

[05:02] It's really helpful to be able to ignore, either on a file 00 which we generally put them in the top -- or line by line, which we disable, then re-enable it again. Then finally, if you would like to just disable an entire block, then you could do that as well. 

[05:19] It works the other way around. If you have the ESLint rule which you have disabled by default, you can enable them by for a couple lines, if you'd like that specific rule to kick in only for a bit of...