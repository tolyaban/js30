[00:00] [music]

[00:02] Instructor: ES6 has introduced arrow functions which, in my opinion, they have three main benefits. First of all, they are much concise than regular functions. Second of all, they have implicit returns, which allows us to write these nifty one-liners.

[00:15] Third of all, it doesn't rebind the value of this when you use a arrow function inside of another function, which is really helpful for when you're doing things like click handlers and whatnot. We're going to take a look at a whole bunch of examples as well as, we're going to be using arrow functions all over the place in this course.

[00:32] I've got this names array right here, and I want to add Bos to the end of all three of these. Normally, you'd do something like this. You'd say "const, fullnames = names." and you'd use map. Pass it a regular function, it's going to pass you the singular name, and we're going to return. 

[00:50] We're going to use back text here, which is our template strings. Don't worry exactly about what that is, if you're not sure just yet. We have a whole chapter on that coming up. Name and we're going to tack Bos on to the end, console log the full names. 

[01:04] What this is going to give me? It's going to give me Wes Bos, Kate Bos, Lex Bos in the entire array. It took this array, transformed it into whatever it was plus the word "Bos" on the end.

[01:14] That makes sense to me, but this isn't an arrow function, so let's take a look at how we could rewrite that. I'm going to leave that one up, just so we can visualize. 

[01:26] I'm going to say fullnames2. The first thing you do with an arrow function is, you simply delete the word function and you put in what's called a fat arrow.

[01:33] If you've come from other programming languages, you might have seen that before, but in JavaScript it's the first time we're seeing a fat arrow. It's an equals sign with an angle bracket beside it. That will do exactly the same thing. We console log it, should be no surprises there. We get the exact same thing. 

[01:50] That's the first thing that you can do, but we can go even further with it where, if you only have one parameter...If you've got two parameters -- that's what these parenthesis are for -- if you've got two parameters, you can do something like that. But if you only have one, there's no need to actually have the parenthesis on it. 

[02:08] That's a bit of a stylistic choice. Some people say put the parenthesis on regardless if you have one or two. In my case, if I have one, I could do something like this. That would do the same thing again with fullnames3. Still working great. 

[02:24] What else could I do with this? I can use what's called an implicit return. What's a explicit return? It's when you explicitly write the word "return" for what you are returning. But a lot of these call back functions that we write in JavaScript are just one-liners, where we just return something immediately in one line. We don't need a whole bunch of lines. 

[02:43] Why do we have to do this return? Well, what we could do is rename that fullnames4, is delete the return, put it up on all of one line, and then delete your curly brackets.

[02:55] When you delete your curly brackets, it's going to be an implicit return, which means we do not need to specify that we are returning name Bos. It will just assume that we're doing so. This should give us the exact same thing. There we go. 

[03:11] Then finally, if you have no arguments at all -- in this case obviously we need an argument -- but if no arguments at all, you need to pass some empty parenthesis there. Then you don't have a name in this case. Maybe we'll just say Cool Bos, and they'll all be Cool Bos at the end. 

[03:27] Oops, we already used that variable here. That's a little bit of a lesson. Fullnames4 has already been declared, because I used it right here. You can't re-declare a variable when you are using const, I should rename that to 5 and make that 5. 

[03:41] Another thing we need to know about arrow functions, at least right now, they may change this in future versions of JavaScript, is that arrow functions are always anonymous functions. What is an anonymous function? An anonymous function...or maybe let's talk about, what's a name function?

[03:56] A name function is when you say something like this, function say my name, and you take in a name, then you alert, or console log, or return, or whatever it is. You say hello, and you pop the person's name right in there. That's a name function.

[04:10] The benefit to using a name function is that if you have a stack trace, which means if you have an error and you want to figure out, where did this go wrong, sometimes a line number as to where it happened isn't very helpful. You need to know actually the name of the function that it got called in. 

[04:25] If you use an arrow function, you cannot name them. We take a look at all of our arrow functions here. None of these have a name. This doesn't have a name. That's not even an arrow function. This doesn't have a name. None of them have a name. 

[04:38] You can, however, put them in a variable. If I were to say something like const, say my name = this looks a little bit weird, and sometimes people get a little bit a freaked out by this.

[04:48] We could say alert. We're going to pass it. A name. We're going to alert, hello, and pop someone's name in there. Now I should able to go like this, say my name. Pass it Wes. If you can spell your own name that would be great. There we go, hello Wes, when you refresh the actual name. 

[05:10] That is actually a function declaration there. The thing we need to know about that is it is an anonymous function and it will not give us very good stack traces. However, if you're not too concerned with that, then you can absolutely go ahead. Of course you could put these on multiple lines as well.