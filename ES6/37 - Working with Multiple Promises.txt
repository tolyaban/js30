[00:00] [music]

[00:02] Instructor: The last example we had stepped, where we waited for the post to come back before we actually found the author, because we needed to know who the author of the post was, before we could populate the author, right? The first thing needed to happen before the second thing could happen. It's sort of a waterfall approach. 

[00:17] But in some cases, you just want to fire them all off at the exact same time, because they're not dependent on each other, and you want to get these two things back, or four things back, as soon as possible.

[00:28] Here, I've got an example for weather, where I'm going to fetch the weather, and it's going to come back after two seconds with a temperature of 29, sunny with clouds. Then I also want to go get my tweets. The tweets, I'm not searching based on weather or anything like that. They've nothing to do with the weather, other than I just need to get these two pieces of data. This goes back after 500 milliseconds, half a second.

[00:50] The way that we can do that, instead of chaining the .thens together, we say promise.all, and you pass it an array of promises, so weather and tweets, and you call .then against that. I'm just going to format this like I like to. Then when that comes back, we are going to get responses. 

[01:17] Let's take a look at what those responses are.

[01:23] One, two, here we go, it took two seconds to come back. How come? This one came back after 500 milliseconds. Even if this one came back immediately -- let's not even put a time out on it at all -- how come it still takes two seconds to come back? 

[01:39] Because we're waiting for every single promise to be resolved before we run our then. If this one takes 10 seconds, it's going to take 10 seconds. It's like the slowest one will decide how long these things should actually take.

[01:54] That's after two seconds. I open it up, what have we got? Zero is sunny with clouds, second one, "I like cake." You know, from a previous video, how would we get that into some sort of sane response? We could just say, const weather tweets = responses. 

[02:14] Then console.log weather and tweets. Now, we have two separate variables, one with our weather, one with our tweets in it, and we can go ahead and start populating the data on our actual home page.

[02:30] Probably not a good idea to name this weather and tweets. Why? Because our promises are named weather and tweets, so maybe call weather info and tweets info. That is an example with setTimeouts. Let's actually do some with some real data here. Let's go comment this out. 

[02:48] We need to APIs. If you work with an API during the day, I encourage you to go grab that API. Otherwise, you can use the ones I've got right here.

[02:57] I've got a post promise here, which is going to go to my blog and grab all of my latest posts. We saw that one already. Second, we have the streetcar promise, which is going to go and fetch some data from the Paris transit system here.

[03:11] We need to resolve both of those promises, or they will resolve themselves, but we need to listen to when they are both resolved so we'll say promise.all, and pass it an array of promises. I'm going to put that on its own line for readability. Then we will have a then, which will give us the responses. 

[03:35] Let's just see what we have inside that response. Open that up on my browser. Actually, by the way, this is not going to work right away, because I'm just running it from my file system right here, and you know that fetch only allows for cors. There's no jsonp or anything like that. 

[03:53] If we want to be working with the fetch API, you need to be running it through some sort of server, so I'm just going to pop open my browser sync server here. I'm in promises and I have this browser sync command here that I run. Start--directory server...actually two directories --files. 

[04:17] What this will do is start up a little server for you and give you actually the files that are in this folder. That's nice, you can do npm install-g browser sync and you can get that installed if you don't have any other way of running a server.

[04:30] We have the multiple promises.html, and then we can open up this, and what have we got here? An array of two things, well that makes sense. Open it up. 

[04:41] We got the first response that comes back form Wes Bos, and we got the second response that comes back from the Paris transit. What's going on here? I don't see the data. Is it in body? No, that's a stream.

[04:55] We actually have this problem here where we have to convert this readable stream into json, right? This is the problem we had on the first one. How do you do that with two things? What we can do is we can return a promise.all again, and then we will take each of these things, which is the responses, and we can just map over them and call .json on each one. 

[05:22] We'll say response, and we will return response.json. Why do we have to call this res.json? Why can't we just say json.parse around, res.body or something like that? 

[05:35] The reason behind that is because there are many different types of data that could come back. I just got the docs here on mdn and it could come back as an ArrayBuffer, a blob, which is cool, because you could fetch the data from a video or an image and stream that in. 

[05:51] You can use json or if it's just text or formed data. Don't just assume that your APIs or your AJAX requests are always going to be json, because it could be any type of data that we have there.

[06:04] What is this doing right here? This response is in an array, and what does map do? Map takes every item out of an array, does something to it, and then returns a new array. 

[06:13] What we're doing here, is we're taking the array of responses and taking each one and calling .json on it, which returns a second promise, which we can then call .then on, and that should then, responses, that should give us some real data. 

[06:31] Let's see here, here we go. It looks like I got 10 posts here, and then in here we've got some information. There we go, information about all of the transit in Paris.

[06:45] That's pretty neat. We do promise.all, we pass it both of our initial promises. Then when both of those come back, we run .json on all of them. When both of those come back from being turned from just regular data into json, which is just instant, that's very, very fast, then this final promise then is called and we can do whatever it is that we want with that data.