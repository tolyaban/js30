[00:00] [music]

Instructor: [00:02] Promises are built into a lot of things in the browser like, fetch and getUserMedia. We're starting to see libraries implement promises on their own, and it's probably a good idea for you to implement promises into your own code base.

[00:13] To create your own promise, you create a variable, and you store a new promise inside of it. A promise constructor takes one function here, which passes you resolve and reject. 

[00:25] The idea here is that your promise is either going to resolve, which means it finishes and passes data back to you. For example, when we used the JSON API, When the data actually came back, it resolved itself and it passed us a list of my blog posts. Or it could reject itself, because maybe there was an error or the data was malformed, or for whatever reason you'd like to reject the actual promise and that will error on out. 

[00:51] We've got these two things right here, and you just call them when you are ready to finish this promise.

[00:57] I'm going to call one immediately, and we're going to pass is like "Wes is cool," because that's the data for this promise. Then we go ahead and say p, and we say .then. I'm just going to do it on its own line here -- it's no different than doing that, but just for readability sake -- p.then. That's going to pass us some data, which in turn we'd be able to console.log the actual data. 

[01:23] Let's see what happens here when we reload. Immediately we see "Wes is cool." Why? Because we created a promise and then just immediately resolved it by passing back "Wes is cool." It's really not that useful, but what you can probably see is that if we wanted to resolve something after some amount of time, maybe after some processing has been done...

[01:44] Maybe you wanted to do some processing on the background that's really intensive. Maybe you wanted to do an AJAX request in the background, and then when the data comes back to you. There's a whole bunch of different use cases for when you would want to use a promise.

[01:57] Essentially it all boils down to "I don't want to stop JavaScript from running, I just want to start this thing, and then when it comes back I'll deal with the actual result." Let's see what happens when we put a set timeout on here. Maybe after one second, we're going to see that we're going to resolve it. There we go, one second later, "Wes is cool" pops up. You'll notice that it doesn't pop up immediately. 

[02:25] Similarly, we could also call reject on it. Look at this, uncaught, in promise, "Wes is cool." That's the actual error. Maybe we'll change that to say, "Error, Wes isn't cool." Why is that uncaught in promise? Because we didn't catch it, right? We should catch the error, and then we'll do console.error. The actual error there, and now when we refresh this after a second, there we go. That is a caught one on line 20.

[03:00] One thing that you might notice is that it tells us Line 20, but that's where we caught the error. Obviously that is where we caught it, but didn't the error actually happen on Line 11? Why doesn't it say anything about Line 11 in here? 

[03:12] Ideally what you do is you throw in an error object, not just a string, so we'll wrap that sucker in an error object, and then when it console.logs the error, we see that we have information about where it happened. It happened in the timeout on Line 11.