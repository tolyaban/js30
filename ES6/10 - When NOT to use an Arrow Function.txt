[00:00] [music]

Instructor: [00:02] Before you start going bananas on using arrow functions, let's go through a couple examples of when you probably don't want an arrow function. All of these are just going to boil down to not having the keyword "this," but they are just different use cases that you'd run into. First of all, I've got this button. It's a big a button that says, "Push me."

[00:21] When someone pushes or clicks that button, I want to toggle the class of "on," which should turn it yellow, "on and off," "on and off." I said I've grabbed the button with [indecipherable] selector here, and then I listen for a click on that button. When someone clicks that button, I'm going to run this following function.

[00:42] It gives us this error, "TypeError, cannot read property 'toggle' of undefined." What does that mean? Well, let's just "console.log" this. What is this going to be? I'm going pause here. Hopefully, you're yelling at the screen right now. It's a window, right? Remember, we talked about if you use an arrow function, the keyword "this" is not bound to that actual function.

[01:04] We don't actually know what got clicked, because we use an arrow function there. We don't want to use a function there. Take that arrow out. We're to choose a regular old function which will allow "this" to be equal to the actual button. Console.log "this" is now equal to the button, and our beautiful clicker is actually working.

[01:25] Now, let's take a look at this next one, when you need a method to bind to an object. Here we've got a "person." We've got this method here, it's called "score" and whenever we call "person.score," it's going to just increment the number inside of it, so we've got 23. Let's see what we've got here. If we just say "person," what have we got? We've got points is equal to 23.

[01:49] If we say "person.score," run it once, two. Let's run it three times. We should be at 26 now. If I say "person," it's still at 23. Why? We'll just do the same thing. What is this going to be equal to inside of a function that has been an arrow function? Go to window. Exactly, right? We do not want to use "this" here. You want to use a regular function, which will give us the actual "person."

[02:17] There we go. That will actually work, 24. You might be screaming at me right now saying, "Even better." We haven't talked about this yet, but there is a function or an object improvement here, where when you have a method on an object, you can simply just type that.

[02:34] Now, we're going to go into a little bit more, but let's just look ahead. We could have also used that. That is equivalent to just a regular type "dot function," not an arrow function.

[02:45] Next up, we have this, when you need to add a prototype method. Here, I've got a class. We haven't learned about classes, but just know that this is a way for us to make new cars. I have this class constructor where, when you call "new Car," we pass it the type of Car, as well as the color of the Car. I can say the bima is a BMW that is blue. The subie is a Subaru that is white.

[03:10] Let's go ahead and look at them. I'll say subie, there we go, is a Subaru that's white. A bima is a BMW that's blue. Now, after the fact, I added on this prototype method, and what that allows us to do is that, even after these things have been created, we can add methods onto all of them. I say car.prototype.summarize, which will allow me to do things like subie.summarize.

[03:37] You see that it's auto-completing it there, because it's available to me. Even though I added it after we created the Car, because I added it to the prototype, it's available in every object that has been created from there. What this prototype does is it returns "this.make" which is the make that we passed in, and "this.color," in a sentence.

[03:57] But when you call it, "this.car" is undefined and the color undefined. Why is that? It's because we try to be cool. We try to be a bit of a hot shot here by using an arrow function. Again, why don't we use an arrow function here? Because we explicitly need the keyword "this," so a regular function would do. Give that a save.

[04:17] Now, if we call subie.summarize, it says it's a white. We call bima.summarize, we get BMW in blue. Again, using a regular function for that. Then, finally, this is a little bit different. It doesn't have to do with the keyword "this," but we don't have access to the Arguments object when you use an arrow function.

[04:39] This is helpful for when you want to run a function like, right here, this function is going to take unlimited arguments. It might take one, it might take 100. It's going to just say like, "This child was born first." Here's an example, older children, I'm passing in, "Jill" as a first argument, "Wes" as a second argument, and "Jana" as a third argument.

[04:59] When I run it, it says, "ReferenceError, arguments is not defined." Arguments is a keyword that we have in JavaScript that's going to give us an array or array-ish value of everything that was passed in. One, two, three items, and you do not get the Arguments object if you use an arrow function when you use a regular function, which is going to give us the actual content that we need.

[05:27] Again, go through all those really quickly. Make sure that you aren't just using arrow functions willy-nilly. In general, if you do not need the Arguments object or you do not need "this," or you know that you will not need it in the future, then you can feel free to go ahead and use an arrow function on everything else.