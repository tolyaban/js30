Wes: [00:02] Let's take a deeper look into when an iterable actually is. Here I've got my array, and I'm looping over it, and I'm console logging the cut. No big deal. But what if I want to get the index of the actual cut as well to say Chuck is first, Brisket is second, etc., etc.? There's no real good way to do that right here unless I were to say cuts to indexOf and find it every single time.

[00:25] What we don't know about yet is that there are these things called generators - and we're going to go into a whole bunch of that in the video - but if you go into your console here and do this with me, say cuts.entries, what that is going to give us is actually an array iterator. If you open it up you'd expect to see all the data, but there's nothing in there. All you know that there's a Next function that we can call on it.

[00:52] So if we actually store that array cuts.entries in a variable, so const, say meat=cuts.entries. Now what do we have? Meat. Is that all of the meat? No, it's the iterator and we can iterate through each of those ones manually. This loop was doing it for us, but if we ever wanted to do it manually - and we'll look at more examples when we hit generators - you call it meat.next, and meat.next, and then meat.next.

[01:21] Let's see what we got there, a couple of more times, there we go. So what do we get here? Well, the first time we called it we got done: false, and that means that the loop hasn't finished -- more in the generator video. Then the value is in array where the first thing is going to be the index, and the second thing is going to be the actual value.

[01:41] The second one, one is brisket, third one, fourth one, you probably get the point. It tells us what the index does is and what the short rib is. Why would this be useful to us in this video where we're learning about for...of? Because what you can do is if we iterate over not just the plain array but we iterate over the array iterator which is .entries, watch what we'll get now.

[02:09] OK, so now we get cut is not chuck brisket, cut is an array every single time that we go through it. Now you might be saying, "That's annoying because now I have to say cut zero and cut one to get the index and the value." But hopefully you're screaming at me right now and you're going to say, "Well, Wes I can use destructuring there, right?" Because what we can do is we can say for const, index, and cut, because each of this is going to return an array, we can just immediately destructure that into their own variables, so const I and cut.

[02:52] Now, if we just console.log I. Let's put this in a tablet string. Cut is the I item. Now we should have a variable.cut and a variable called I, there we go, chuck is the zero item, brisket is the first item, second, and third etc., etc.. If you wanted to offset that you would just add one to it in first, second and third and fourth.

[03:14] Good. What are we doing here? We're using cuts.entries to bring us an iterator. For...of, this is kind of the nice thing about for...of, is it can pretty much handle anything that you throw at it. You don't have to think, "What kind of data is this? Which of mine like four or different loops that I have available to me should I use?" In almost all cases, except for objects, you can just use your for...of, and just throw anything at it, and the for...of loop is going to just figure out how to handle that data for you. So here I've destructured the data as we actually go on in, and we're off and running with that.

[03:51] Let's look at another example where for...of is useful. That is when you're trying to iterate over the arguments objects. I'm just going to take this out for a second. Let's say we have a function called add up numbers. And that function is going to be called like this, add up numbers. You have no idea how many numbers are going to get passed. Maybe some of this is going to pass a whole bunch of them. When you're declaring the function, you can't really like put a whole bunch of placeholders, like num1, num2, num3, just in case they past that many, because you have absolutely no idea how many arguments are going to pass. So instead of putting anything in there, what we can do inside of this function is to just console.log this variable called arguments.

[04:32] Now that is a special word and it's going to be in array-ish type where it will give us all of the actual arguments. So let's take a look here. Cool. That arguments is now what looks to be an array, it's not exactly an array of everything that got passed in. Why I'm so bent up on saying it's array-ish is because if you open it up, you'll see a couple of things right here. First of all the prototype is not an array.

[04:58] What happens, let me just console.log a regular array just to show you. One, two, three. This is a regular array. Open that sucker up. The prototype of that thing was the array, and if you open that up you'll see here's all the crazy array methods that we're used to like every entries, and cat, and map, and push, and pop, and reduce, and everything we could possibly want, right? Because that has built up a proper array.

[05:23] Now, arguments is simply just a list with only one thing on it: length. However, you can iterate over it with the for...of loop because it has a symbol iterator. Normally, in a case like this, I would probably just convert arguments to a real array and use a reduce on it and add them all up. But for whatever reason, if you're ever in the use-case where you cannot convert your arguments to an object maybe for some performance reasons, or whatever you have, then you can go ahead and loop over arguments without first converting to an array. There's no need to convert it to an array if you just need to loop over them.

[06:02] What I'm going to do is I'm going to say let total=zero, start with zero and then I'm going to loop over each of them. So I'm going to say for num in arguments total + = num then we should be able to return the total here. That should add them all up, let's see. I'm going to console.log total as well just so we can see it.

[06:30] I've got a bit of an error here. What is my mistake here, can you spot it? Why is it saying 00123456? Because I said for...in, it's for...of, not for...in. For...in would give us the index. For...of will give us the actual argument. Refresh. There we go, 267, because I created a variable and it looped through it and it updated every single one of them. Now, if I ever want to call add up numbers, what's 10 + 10? 20. What if I want to do a whole bunch, more of them? Not a problem, it's going to give me 256, appropriate.

[07:07] That is one example of what you could loop over it. You do not need to convert to a true array, you can just use the for...of to iterate over it. What else can we use to the for...of to iterate over? That's for a string, so maybe you have a name like Wes Bos. I'm going to say for const character of name, console.log, the character, and that will give us the s-base B-O-S. Notice how I put a const there? I think I forgot. Yeah. You make sure you put a const, a let, or a var in front of this, otherwise you're going to be overwriting the actual variable every single time instead of creating a let or a const that is scoped to that actual block.

[07:47] Finally, you can also loop over DAM collections without having to convert to a true array. Now, DOM collections, or nodeless or HTML collections, whatever you're going to call them, they are being changed so that you will have all of your .for each, and .map, and all of those array methods that you're used to. However, in most browsers they are not a true array, so we could use the for...of, no problem there.

[08:12] Maybe we'll give ourselves a couple of paragraph tags in the body up here. Let's just say a paragraph that says something like IIOP$, let's give ourselves 10 of them. Cool so I've got a whole bunch of paragraphs on the page here, let's see them all right here. Then I want to select them, say const piece = document.querySelector all paragraph. Then I'm just going to console.log the paragraphs. So this, open it up. See, it's not a true array it is a nodeless, but if you open that up you will see that we have dot for each as well as a couple other of the array methods that we're used to.

[08:57] If you want to loop over it with a for...of loop, or const paragraph of piece, then we can console.log the paragraph, you see that we get each individual one here, and that's useful if you want to do something like paragraph at event listener on click, function, console.log, .text content. Anytime someone clicks on a paragraph go ahead and console.log whatever is inside of it. Do three if you want, do two if you want.

[09:35] Good. Didn't need to convert it to an array. Again, you totally can. I'm not sure of a huge performance difference between the two. You can do your own testing on that. But it's helpful to know that you can use this for...of with things that aren't arrays, as long as they're an iterable. And what is an iterable, a DOM collection, argument, a string, an array, a map, or a set.
