[00:00] [music]

Presenter: [00:02] Let's make our own JavaScript modules which we can import and export into each other. I could make another JavaScript file alongside app.js but I'm going to make a new folder called SRC.

[00:13] That's not anything special but it allows me to keep my modules in its own folder. I'm going to create a couple of modules, we're going to start with very simple one where we import and export one function in two strings. We'll create a new file and let's call it config.js.

[00:27] Config.js is a place where I like to put all of my API keys and rest endpoints. Rather than scattering them through the entire application, I like to put them in one single file so that if I ever have to reference any of the configuration for my application, I could just go to config.js.

[00:43] Inside of that let's take const API key is equal to ABC123. Let's stop it at that and say, "How do I get access to this API key variable when I'm in another module, when I'm in another file?" I'm an app.js here and I want to know, how do I get access to this config here?

[01:04] Variables are not global with modules. Variables are always scoped either to their function or their block, or if they're not scoped to anything they are scoped to that module. That's the kind of benefit of having modules is you have this little files that are self-contained and they don't bleed into anything else.

[01:23] There's no global variables that sit on window for you to be able to access everything. How do we actually get API key from app.js? We need to first of all import it from app.js, so I'm going to say import API key from. Now, this is not a node module, it is a local file, so we start it with a relative path./src/config.

[01:52] Notice how we don't have the .js on there. It's not necessary. If I were to try and console.log the API key, give that a save, you see that our bundler.js refreshes. I'm going to open the index in our browser.

[02:09] You see on line five where we tried to console.log API key you do not see anything. It's an empty object that has not been imported. That's because config.js has not yet exported itself.

[02:20] In order to make this API key available outside of this module, we need to export it. There are two types of exporting in the ES6. There is something called the default export which will allow you to export it as the default, which means that when you import it you can import it as any name that you like.

[02:41] Then we also have what's called named exports, which when you export it you export it as that variable name. When someone imports it on the other end they must know the name of the thing that they are importing.

[02:54] Generally, a default export is made the main thing that that module does, if there's anything the main thing that the module does. A named export is used for methods, and variables, and things that you need to pluck off from that.

[03:10] I'm going to show you the default export first, and then we'll change this one over to a named export. To make this API key exported as default, we go to the bottom here and we say export default API key.

[03:23] That is going to be available outside. Go into appjs and then we import it. We already did, import API key from source config. We can go back to our JavaScript here and refresh, and now we see ABC123.

[03:40] The important part is because we exported it as a default, we can name it any possible thing that we want right here. We've called it API key because it's the same thing, but I could name is '"Wes is cool" as well, and refresh. It still works exactly the same way.

[03:57] How come? Because the default export gets renamed as whatever you import it as. So we've imported it as "Wes is cool" from there.

[04:08] Every module that you have can only ever have one default export. However, you can have multiple named exports from a module. Let's take this API key and change it over to being a named export. The way we do that is let's just remove this entirely, and we stick in export right in front of it.

[04:27] What that will do is it will export this variable, or the function, or the string, or whatever it is you'd like to export from the module and export it is as the name. When I say this, Webpack is going to get a little bit angry at me, because we have a bit of an error now.

[04:43] It says, export default imported as "Wes is cool" was not found. Now, if we go back here we called it "Wes is cool," but because we did it as a named export -- let's put a little comment, named export -- you have to import it as whatever it was exported as.

[05:02] We have to go back here, we can't use whatever we want. We have to use API key and then that's still not going to be enough, Webpack's going to give us an error here. It says, "Export default imported as API key was not found."

[05:16] What happens is this syntax imports something from something that is used for when something was exported as a default. If you wish to import a...What kind of import is this, it's a named export. If you want to import something that is a named export, you simply stick some curly brackets around it.

[05:35] It looks kind of like destructuring, but it's not. This is just a syntax for importing things that were named export from a file. Then if I gave that a save, Webpack should finally be happy with us, there we go. We go back here and refresh, we get ABC123.

[05:51] Let's do it again. Go back to config, let's create a variable called url and send it to wesbos.com. How do I get that available to this other file? Let's take an export in front of it and you head back to here. We simply just import URL, then we have that URL variable available to us anywhere inside of this file. You see how you just pick and choose the things that you want.

[06:23] At first that might seem like a little bit of a pain because you don't have access to everything, but that really helps enforced these small modules that do one thing and one thing well.

[06:33] If you make this self-contained modules, chances are you'd be able to use them on multiple projects, and you can just trade them around and they're easily testable, and all kinds of other benefits that we have there.

[06:44] Here, I've just been exporting variables but you can also export functions. Let's say I have a function called "Say hi," and it takes in someone's name and it console.logs, hello there, name. If I want that to be available -- and that could very well just be an internal function that I use inside of this module.

[07:02] They don't all have to be exported, but if for whatever reason I wanted it available in another module. I would have to stick an export on it. That would be exported as "Say hi." Then I can go back into my import, import "Say hi," and then I can say, "Hi, Wes." Give that a save and a refresh here. It says, "Hello there Wes."

[07:28] There's all kinds of really nice syntax for ES6 modules and I encourage you to search for export MDN and take a look at the Mozilla developer network docs for export. What we've been doing is we have been exporting something like this, export variable, export expression, export function.

[07:48] You can export multiple things at once. If we had a bunch of variable names const-age = 100 and const-dog = snickers. I could export both of those at once, I would say export, open curly brackets, age and dog. Then I will be able to import those into just like I was doing it here, age and dog.

[08:16] I'm not going to console.log them. You'll just have to believe me that I actually can use them like that.

[08:20] There's also a couple of other things where you can rename them using the "'as" key word. That's really important because imagine you had a variable called url, or imagine you already had a variable called API key, you needed to rename it. What you can do is you can say import API key "as" key and it's going to take the named export of API key and import it "as" variable key.

[08:47] It's no longer API key. You can see my ESLint is saying that is not defined, why? Because we imported the API key "as" key and we have it there, so that's how we would have to change that one.

[08:59] The same goes for when you export things, you can export age as old. Then when you import age it's no longer being able to import it. You have to import it as old not as age.

[09:15] You have some flexibility there. If you'd like to rename them you can also put this on their own lines just for readability sake. You do something like this. That can be really handy when you're importing maybe five or six different methods from it. That's just a personal preference as to how you like to write your code.