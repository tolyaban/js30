[00:00] [music]

[00:01] Instructor: Let's take a look at some more spread examples. One use case for a spread is an alternative to array.from, which we learned about a couple of videos ago. 

[00:11] Let's say we want to select all of these people right here. Let's say cons people = document.querySelectorAll, and we want to select the .people paragraphs. Console.log the people, and we'll see what we're dealing with here. We got all of our three. You know that it's a NodeList. 

[00:30] But if I wanted to call map against people, again, we were doing something like const names = people.map, you know that we aren't able to do that. Why? Because people.map is not an actual function. If we console.log people here, it's a NodeList, and the prototype doesn't have our .map or .reducer or any of our arrays. 

[00:53] You could do this, array.from, and that would then give us...see how it's a NodeList? Refresh, now it is a true array where our map is located there for us.

[01:05] Quite honestly, I think that I prefer array.from, just because it reads a little bit nicer. But another way you could do it is you could immediately take every single item that it selects, and spread it right onto an array. 

[01:19] That's going to take everything that it selects. Why? Because a NodeList is an iterable, and every single item from that iterable can then be spread onto this new array. Then you see that we have a proper array here too.

[01:33] It's really up to you what you like to use. If you're probably on a team, array.from probably reads a little bit nicer. But I have seen people do it the other way, and that would give us our map function as we like it. 

[01:48] We've got one error here, undefined is not a function. I have to run person...I want to return the person.text content. Then we should have a names array of every single name. Good, I'm happy with that.

[02:07] Couple other examples is when you want to create a new array off of a property on an object. This is similar where we merged two arrays together. 

[02:18] Maybe we did const shopping list equals a new array. We know we have to get milk to make the pizza, we know we have to get flour. But we also know that since tonight is deep dish pizza night, we have to get all of the ingredients from it. 

[02:37] What I can do is just immediately spread all of the ingredients from deep dish.ingredients. Since that's an array, it's going to take every single item from that and put it into the new shopping list. If I console.log shopping list, you see that we now have every single item in it. That is a true copy, not a reference to the deep dish.

[02:59] This is an example where I've run into a couple times. Specifically I do it a lot in reactor when using Redux. It's when you have an array of objects and you need to remove one of those objects from the actual array, and all you're given is...This is a mean comment, so I want to delete, "You are so dumb." 

[03:18] All you're given is an ID variable with that post ID inside of it. How do you actually take it away? First of all, we need to figure out where in this array is this comment? Because the ID doesn't tell us anything about its location inside the array.

[03:34] How would we do that? We would use the .find index method of the array. We'll say, const comment index = comments.findIndex, and it's going to give us a comment. We're going to return if the comment.ID is equal to the ID variable. 

[03:55] When the comment ID is equal to the ID variable we have set here, then return. That's going to tell us where the index is. Let's console.log the comment index, see where it tells us. Good, it tells me the index is two; one, zero, one, two, "You are so dumb." 

[04:11] That's the one I want. Now how do I actually delete it from there? Previously, what we had to do is slice everything before, slice everything after. 

[04:20] What we can do here is we will make a new comment variable. We'll say const new comments equals...and we are going to create an array of the new comments. We want everything up until the mean comment, and everything after the mean comment. What we can do is slice from the start to where we want, and then slice from one after the one that we want, to the end.

[04:48] We'll say, comments.slice. We're going to start at zero and go until we hit the comment index. Then I'm going to go comments.slice. We're going to start at the comment index plus one. It's going to tell us two, so we're going to start at three. Then, we don't have to pass the second variable because that will just go to the end of the comments. Even if I had 10 more comments, it would go to the end of it.

[05:18] This isn't going to totally work and I'll show you why. Let's console.log the new comments. 

[05:22] What do we have here? We have an array of arrays, which is the first part and the second part. That's not very useful because you don't want an array of arrays. You want an array of comment objects. What we can do is just spread these two and spread this one, and that will take every item out of the array and put it into this new comment array right here.

[05:48] Now when I refresh it, you'll see this is our new comments array, that you have the new comments, and we've excluded that mean comment that we have sliced on out. 

[05:58] Then you would probably take this new comment and you would set it to this, .set state and comments. If you're doing something like react, you can pass the new comments and it's going to update your new state without mutating the past state.