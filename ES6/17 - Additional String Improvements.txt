[00:00] [music]

[00:03] Instructor: Strings in ES6 come with four new methods that are really handy, help us write a little bit more readable code, as well as reduce our reliance on using RegExp for certain things. 

[00:12] Here I've got this course. RFB, this stands for React for Beginners. Sometimes I have RFB1 which is the starter package, 2 which is the master package, 3 which is the team package. I don't really care too much about that in certain cases, I just want to know does it start with RFB, not something like STPU, which is Sublimed Text Power User or ES6, which is this series.

[00:35] RFB means React for Beginners. I need to know, does the string start with it? We can just take the course, if it starts with RFB, that's going to show me true because obviously it does start with it. 

[00:50] If I did RFB lowercase, it says, "false." There is no way to make this case insensitive. If you do need case sensitivity you do need to still use a RegExp. One other thing that startsWith with will do is it'll allow you to skip a certain number of characters and start looking at it.

[01:08] This flight number here, I want to see if it starts with AC. It's false, because it starts with 20-. Sometimes we have these SKU numbers, when they start with a bunch of junk and then it gets to actually what we want. 

[01:22] What you can do is you can run startsWith and then say pass 3, and that says start after three characters. That is then true, because it ignores the first three and then starts at AC and checks against that.

[01:36] EndsWith works fairly similar. Here is an example where we have JZ on the back, and I want to know if it's a jazz flight. We can say flight number.endsWith JZ -- J Zed, depends if you're from Canada or not. That will be true obviously, because it ends with it. 

[01:58] There's another option that we can pass endsWith, and I'm going to use this account number variable as an example here. In Canada we have business numbers that are nine digits long. They're always nine digits long, and that is your actual business number. 

[02:12] Then you have a tax number, which is RT 0001, 0002. You have RP 0001 for your first employee, RP 0002 for your second employee, etc. We have RC for your corporate taxes. Often you need to know, is this number a tax number or is this number a corporate tax number, or is this a payroll number? That would be if it's RC, or RP, or RT.

[02:41] I need to check if this number,ends with RT, and I want to ignore this right here. What you can do is you can tell the account number to just take the first X number of characters, and ignore the rest. 

[03:02] I'm going to say account.endsWith RT. Ends with, not width, RT. That's false, but what I can tell it is only take the first 11 numbers, and that is then true. Essentially you're just going to take the first 11 numbers, ignore the rest, and then see if it ends in RT or whatever else it is.

[03:23] Then next up we have includes. Includes will just check if that string is anywhere in it. If I wanted to say, if my flight number includes, anywhere, if it includes the words AC, that is true. Again, it is not case sensitive so you cannot do that. You have to know that. 

[03:41] Includes is anywhere in. It was supposed to be called .contains, but now it got changed to includes because of some conflicts with the MooTool libraries and the way that they modified the prototype.

[03:53] Next up we have make, model and color here. I'm going to show you where that would be useful for using .repeat. What does repeat do? Repeat allows you to take a string, like a snake, and repeat it. "Get my snake back," repeat it like 10 times. 

[04:12] That'll give you 10 snakes or 1,000 snakes, or however many snakes you would like. You can just call .repeat and it's going to repeat that string over and over and over again.

[04:21] Where is that useful? Sometimes we have some words here. I'm going to take BMW X5 in royal blue, and if I wanted to display them maybe in a terminal or something, but I want to right align them. How would that work? I'd have to just put a whole bunch of padding in, depending on how long this was and how much space will go in here. 

[04:46] That is what is called a left pad function, and you can use .repeat to code a nice little left pad function. Let's do this, function, leftPad. That will take in the string that we want to pad and the length that we wish to have it. I'm going to set that to a default of 20 characters.

[05:06] Inside of here, we can return. We're just going to return a string which I'm just going to start with a little arrow, just to show us where we are, and we need to then pad it with however many characters we need. We'll take a space and repeat however many. 

[05:23] How many do we need? We take the length minus string.length. If it's 3, it's going to give us 17 spaces that have been repeated, and them we just tack on the string there. Now I've got this nice little leftPad function. 

[05:42] I can take make, model, and color, put them in here. It's going to console.log each one of them out. Console.log leftPad model. I'm going to leave out the length because we're going to default it to 20, and it should just pass in the make, model, and color.

[06:05] There we go. See how all these are perfectly left aligned? BMW X5 in royal blue, whereas all of this is however much padding we actually need. That's a nice little use for repeat. 

[06:17] Another little funny one that you can do is, we can take an ES6 template string, and inside of that let's do a statement where we take a...what we do we want to multiply? Dancing lady, string of dancing lady, times five.

[06:37] What happens when you take a string and multiply it by a number? You get a Nan. Some of you might have a Nan, yourself. Let's call repeat on that 10 times, and then tack on Batman. 

[06:51] What's that going to give us? Nan Nan Nan Nan Nan Nan Nan Nan Batman. Pretty funny. I didn't make that up. I saw it online somewhere, but I thought it was pretty cool because what's happening here, you're giving yourself essentially a string of Nan, repeat it 10 times, and then you're tacking on Batman on to the end. 

[07:10] Those are some four new ones. Put them in your back pocket, and hopefully enjoy that. Thanks.