[00:00] [music]

Wes Bos: [00:02] We have a new type of loop in JavaScript, and that is the for...of loop. It's used to loop over any type of data that isn't iterable. We're going to learn all about different types of iterables, and we're going to learn why this for...of loop is so useful when we hit things like generators and maps and sets and so on. For now we want to get an idea as to how this loop actually works.

[00:24] What is an iterable? An iterable is anything that can be looped over. If you have an array, you can loop over an array, or a string, or a map, or a set, or a generator. We're going to look at all kinds of different examples as to when you can do it, but let's get going with looking at some of the existing loops first, and see what are the shortcomings of our existing loops, and why does for...of shine above all of them in a couple of use cases.

[00:51] The first one I want to talk about is, I've got a survey right here, which is just a regular array with four items in it. We're going to look at the regular for loop. You've probably have written this one over and over. For let i = 0I < cuts.length; i++. Then you console.log(cuts[i]). You've done that one many times and you see chuck, brisket, shank, and short rib. No problem there.

[01:19] What is the downside to something like this? The downside is that it's kind of a confusing syntax. In all of my years of teaching JavaScript, this is probably one that trips people up the most. 

[01:30] It does make sense when you break it down into the three parts, but people look at it and get anxious when you see it because there's a whole bunch going on here. Also, it doesn't read that nice to me. 

[01:40] You don't have a variable called cut as a singular of cut, you just have cuts[i], and you have a problem here where if you use a var you don't have a closure, etc., etc. It's good in some cases, but not great because of the syntax that we have here, so I'm going to comment that one out.

[01:58] What other kinds of loops do we have? We have the .forEach array method, if we say cuts.forEach. That will give us a function. Actually, we use an arrow function there because we don't need this. That is going to be .forEach they're going to give us a cut, console.log a cut. 

[02:17] That works pretty well. What's the downside to that? Well, we cannot abort this loop. We cannot skip one of the ones. For example, if I wanted to stop once we hit the word brisket, I would say if cut = brisket then I would break, and then that should console.log chuck brisket, and then stop the actual loop. 

[02:41] It doesn't work because you can't use a break inside of a .forEach. Same goes for continue. We can't continue. We can't skip over that specific one, it's going to yell us, illegal continue statement.

[02:56] I like the for each in a couple of use cases, but if you need to be able to skip over then that's not a good one. So far we've got these two loops and you have to decide what you want. We also have the for...in loop. We're going to learn about for...of, but we have for...in.

[03:11] For const, let's say cut in cuts. Console.log cut 01, 2, 3, 4. It actually gives us the index, so you could say, maybe, index cut. No, that doesn't work. It doesn't let us do that. Maybe take the const out? No, that doesn't work.

[03:35] There's no way for us to actually do that either, so I'm going to bring that back. This is actually the index, and we'd have to console logs cuts[index]. That will give us our value, just like we did on this first one. 

[03:51] That might be OK, but one thing is if you have ever worked with an array, or someone has monkeyed with the prototype, what does that mean here?

[04:03] You may know that there are many methods on the prototype, like .forEach and .filter and .map. However, some people believe that you can just add things to the prototype of the array. For example, I'm going to go here. I'm going to say the array prototype, shuffle. 

[04:22] I'll turn off my ESLint here. It's just yelling at me. ESLint disable. We'll talk about ESLint in future video. 

[04:29] I've added the shuffle method here, which is kind of cool, because you can do thing like this. You could take your array here, which is cuts. We could say cuts.shuffle. Now we have this new shuffle method that was just made, because we added it to the prototype of every single array, and that will just shuffle the actual array for us. 

[04:47] That's cool, but now what happens when I console.log the index of cuts? Chuck, brisket, shank, short rib, function. What happens? It iterates over absolutely everything in the array, including things that have been added to the prototype.

[05:10] It doesn't just iterate over the items in the collection, because what are the items of the collection? The items of the collections are chuck, brisket, shank, and short rib. But it also iterates over additional things that have been added.

[05:22] If someone comes along and says cuts.shop = meats, watch this. Now, all of a sudden, any time you add a property, or a method, or anything to the array, it's also going to show up in this. That's kind of a pain. You may say, "That's fine but I never do that," but lots of times there's libraries that actually modify the prototype. 

[05:48] For example, MooTools is known for modifying the prototype here. If I am on a website; I'm not even going to use MooTools here, but I'm going to make an array with var names, and I want to iterate over them. I would say for name in names, console.log name. Watch what happens. 

[06:15] Holy smokes, we get zero and one, that's the index. That's going to be the name, actually, but then you get all this other crap. What's this? This is just because the prototype has been modified, and that's what shows up when you use a for...in loop.

[06:32] Those three things aside, we now have the for...of loop, which gives us the best of all three worlds. You're able to use the for...of loop for absolutely any type of data, except objects. We can't use it with objects. We'll look at that in a second.

[06:50] The way that works is you is for cut of cuts console.log. Actually, you have to do a const variable here. If you just do that, that's going to leak into the global names, so I'm going to say const and cut. There we go.

[07:09] Even though I've monkeyed with the prototype and added this weird property on to the array, we still only get actual items of it with the for...of loop. You're able to use your break and continue. 

[07:21] If cut = brisket, I want to break. I want to stop the entire loop from going. We only stop. We get chuck, brisket, and then the rest should not show because we broke the loop. Here we go, chuck and brisket.

[07:36] Similarly, if we wanted to just skip a whole bunch of stuff, if we wanted to skip console.logging brisket, we could just simply say continue. That's not going to break the entire loop, but it's going to skip over this one iteration, so we should see chuck, shank, and short rib. 

[07:52] Why? Because when it was brisket, we hit continue. It's like having a return from a function. It just ignores everything underneath it, and goes on to the next iteration of our item. 

[08:03] That's introduction to the for...of loop. Let's dive in a little bit deeper and see where else we can use it.