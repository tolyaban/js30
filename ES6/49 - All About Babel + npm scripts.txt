[00:00] [music]

[00:02] Instructor: One of the reasons people haven't picked ES6 just yet is they say, "Well, it doesn't work in all the browsers." That is not true for the latest browsers, but it is true if you have to support a browser that is older than, I don't know, a year or two old, where they just don't know about this ES6 things. 

[00:18] However, that should not stop you from using ES6 today because it is possible with Babel and polyfilling to get probably about 99 percent of all ES6 working across all the browsers that you need to support.

[00:32] What does that mean? I'm going to explain to you what Babel is, how we can set it up, and in the next video I'm going to talk all about using polyfills to polyfill the new methods that we haven't used.

[00:44] Babel, what is it? I've been talking about it a couple of videos and I've referenced it, but I haven't actually gone through it ahead and say what it is. Essentially it is a JavaScript compiler, and what that means is you put JavaScript in and you get ES5 or a browser-compliant ES5 out.

[01:01] It initially started with just ES6 stuff, however it's really expanded to future JavaScript stuff, experimental JavaScript stuff, a lot of React stuff is also in it. Let's take a quick look at how it works, and then we'll step back. I'm just going to go to babeljs.io and I'm going to go to Try It Out.

[01:22] This is really nice, because if you're ever trying to understand how something works you can just go to the babeljs REPL right here and try it out. 

[01:30] Right here, I've got this function called log pet. It takes in a pet name and it takes in a pet type. However, we've got a couple of ES6 things going on here. I've got this petType = dog, where I've set that as a default, then I'm also using template strings here. 

[01:48] Now, that works great, but what if everyone is using the latest Chrome? What Babel will do is compile it down to what the ES5 equivalent is, and it does a fantastic job at doing that. Never mind what this code actually looks like, because you're just concerned with how this code looks like.

[02:06] Let's take a look. Right here, petType = dog, here it does a quick check if someone has passed a second argument, and if not, they set petType to be = dog. Same thing goes for when I am doing concatenation here. This is template strings, but this kicks out actual annoying concatenation.

[02:29] That's Babel and we use it pretty much in every single project that you need ES6 to work with. It sort of goes hand and hand with a Webpack or a system JS.

[02:38] I've already shown you how to use Babel with Webpack. You only need Webpack or system or a Browserify if you are using modules. If you're using absolutely everything else, there's no need for a Webpack or a Browserify or anything like that. 

[02:57] If you just want to write ES6 code and get it to compile down without having to use modules, then you don't need a Webpack or anything like that. You can have a much simpler setup.

[03:06] I'm going to show you how to do that now. Let's take a look. Here we are in our ES6 tooling. Let's make a directory called Babel and let's move into Babel. 

[03:18] Now, I need to set up an npm package, we're going to set npm in it, and now we have a package.json file. Now we need to install just two things actually. We need to npm install babel.cli. What that will do is it allow us to run Babel via the command line, or we're actually going to do an npm script. 

[03:41] Then we also need what's called a preset because Babel has these plugins, if we go to plugins here, and every single possible feature that JavaScript has, has a plugin.

[03:54] They sort of chunk it out into different plugins, so arrow functions, and block scoping, and classes, and for...of, and destructuring, and spread, and every single possible feature of ES6 is available right here.

[04:11] But then it also supports modules. It also supports some experimental like stuff that might be added to the language but we aren't quite sure just yet. It supports some minification stuff. It supports a whole bunch of React stuff. 

[04:24] There's all kinds of stuff, and probably you don't need all of these. You just need all of the ES6 stuff, so rather than you having to download every single plugin that you need here, they also have this thing called presets. A preset is simple, just a collection of plugins, so we don't need to install every single ES6 plugin, we just need to install one ES2015 preset, so that's what we'll do. 

[04:49] We'll say babel-preset-ES2015, and then we're going to save of those to our packge.json. Once it's installed you can actually check your package.json and you should see that we have babel-cli and babel-preset installed.

[05:07] Now that we have that, we have this command called Babel. You won't be able to run it via the command line unless you have installed that globally, but we can run it via an npm script. 

[05:17] That's actually what we're going to go ahead and do, is we cab go into our scripts here, we can delete the test one, and we'll just call that script called Babel. The actual command that we run is called babelapp.js, so we're going to run the Babel command against app.js, and we are going to watch for changes, and we are going to save the output out-file to a file called app-compiled.js.

[05:45] Now, a couple of things we need here. First of all, we need an app.js, so let's go into our Babel and create a file called app.js, and let's just say const age = 100, const people = Wes and Kate, and then let's just say const full names = people.map-name, we'll do an arrow function, and then we'll return the actual name plus Bos on the end. 

[06:22] What did we use? We used const, we used arrow function here, we used implicit return, we used a whole bunch of different ES6 features here, and ideally what should happen if we take that and try it out in the Babel editor, it should compile that down to using var. It should properly scope the vars if I'm inside of any blocks, and it should make it a proper function and use concatenation.

[06:50] How can we do that here? Let's go over to our package.json. Now we have the script here. If we were to run it, it wouldn't work just yet, and I'll show you why...npm run Babel. If we up our actual app-compiled right here, it kicks out or JavaScript file, but none of it has changed at all because Babel by default just is a file mover. 

[07:13] It doesn't actually do anything because we haven't told at which plugins or which collections of plugins, which is a preset, to use. To tell it, we could have done it on the command line here, or better is to have what's called a .babelrc file. A babelrc file is very similar to an ESLint file, where it will check .file for your specific settings. 

[07:38] I actually don't like to use a .babelrc file in some of my tutorials because it's a .file and it always gets lost. People that have hidden files don't copy it over, so one little thing you can do is you can actually put your babelrc file inside of package.json, which is really cool.

[07:55] We can just go into our package.json, go to the bottom here and add a Babel. Now we are writing json here. Make sure you use double quotes. 

[08:02] Our Babel file is going to be a couple of things. Which preset are we using? We'll we are using ES2015, and that's it. If you had multiple presets, like you might also be doing React, then you do React, like that. However, we just have one. 

[08:25] That is our entire Babel config. There's a whole bunch of other stuff that you could possibly put in there, and to find out more about that you go to usage cli, or go to usage babelrc, and it's going to tell you information that can possibly go into it and you can check it all out via the options on here. 

[08:47] File name, presets. See, that's the one we're using. Plugins, if you want to add an additional plugin there. Highlight code, ignore, etc., etc. All kinds of fun stuff that goes in there, but we really just need the presets here.

[09:00] I think we should be able to now run. Quit it and then npm run Babel, and it should kick out an app-compiled. I open up my compiled in new tab here...There we go, look. It's telling me that we use var here, we have full names, it's using a proper function, it's using concatenation.

[09:21] Now any time that I write any sort of ES6 in here, for person of people, const, console.log, person, give that a save, it will rerun here, and look at this. It does all kinds of crazy stuff. 

[09:41] It uses R4, it uses the symbol iterator, it does all of the hard work behind the scenes to get this to actually work, where we just have to write the nice, clean ES6 and it works extremely well. 

[09:55] Companies like Facebook are using this to compile their entire code base, so if it's good enough for them it's probably also good enough for you.

[10:03] One other thing is if you would like to add additional plugins -- because our package.json Babel preset is only ES2015, but let's say you were interested in trying some of the other plugins out. One that I am a big fan of under experimental is this object rest spread. 

[10:21] Remember you learned about rest and spread... and I said this only works for arrays. It can also work for objects, but it's not in the language yet. It hasn't totally done. What we need to do is install this right here, npm solve Babel plugin transform object rest spread. 

[10:42] We take that to our command line. Make sure that you save that dependency, and now that we've installed this right here we can go to our package.json, and instead of also using presets we can use plugins, which is going to be an array in itself. 

[11:01] The plugin that we are using is the transform object spread, so I should be able to now go into my app.js and use some of their rest properties or their spreads properties, paste it in here. Let me paste that at the top so we can see it. 

[11:17] Give it a save, now I need to rerun it, npm run Babel, and here we go, you see that. They put in some helper functions often object without properties, and this is our actual...It looks a little bit funky sometimes, but they know what they're doing and the code actually turns out working really nicely.