[00:00] [music]

Host: [00:02] You can probably see where let and const are going to be useful, where you need to scope something to a block or when you want to make a variable that cannot be changed by anyone by accident or on purpose.

[00:12] Let's take a look at a couple of more examples of when it might be useful. The first one is replacing the IFFE. I'm not sure if you've ever heard of this before, but it was coined by Ben Allman back in 2010. It's called the Immediately-Involved Function Expression. What it does is it is a function that runs itself immediately and it sort of creates a scope where nothing is going to leak into the parent scope. In our case, nothing is going to leak into the global scope of the window.

[00:43] If I have a variable, just a var variable, name = Wes. I give it a refresh and now I type in "name." It works and that's OK for the demo here. What you might not know is that the window actually has a name attribute, which is needed when you have a window opening up a second window. That's something that may be some third-party JavaScript relies on, in order for it to run, or maybe someone else has a variable name and you accidentally overwrite that, and it starts to get a little bit messy.

[01:15] The way that they fix that is you make this thing called an IFFE, which is a function that runs immediately and you put your variables inside of that. These variables are now scoped to this function here, because var variables are function-scoped, and they are not available in the global scope.

[01:34] I type "name" there, and it's actually not undefined, it's just blank because that is a property that lives on the window natively in JavaScript. If I needed to access this, obviously, I'd have to do a console log inside of here, but the important thing is that it's no longer leaking into the global scope.

[01:50] With let and const variables, we don't even need a function for our variables to be scoped to that. Because why, let and const are block scope. Really all you need to do, we bring this up here and let's make that a const variable. Let's make sure that it's going to give us this global scope again. Type the name, there we go. We got "Wes."

[02:09] But if I were to simply just open and close a pair of curly brackets, that is a block, and now it is going to be scoped to that block. Refresh this, type in name, you get the pair of quotes again. If I wrote a console.log(name) inside of this, it gives me "Wes."

[02:26] Pretty cool. You don't need any of that IFFE stuff anymore. You're using let and const because they are going to be scoped to that block.

[02:33] The other problem using let and const will fix is with our for loop. This is something that you probably have all run into with your regular for loop. Now, I just go ahead and console.log(i), and we should see that we get zero through nine.

[02:48] Problems that arise here are two things. First of all, if I type "i" into the console, you'll see that it is 10. We have this global variable that has leaked out and is leaked into either the window or into our parent scope which is not something we necessarily want. That's just a placeholder value that we need to work inside of this loop.

[03:08] Second of all, is let's say you were doing something inside of this loop. Maybe you had something that's going to run after some bit of time, an AJAX request or I'm going to mark it up with a setTimeout(). I'm going to say setTimeout(). We have a function here and that function is going to run after one second.

[03:30] After one second, let's do console.log, the number is...We'll put the i variable inside of there. It's going to run after a second. That's weird. After a second, all of them are 10. The reason that we have that is because, right here, console.log(i), that will run immediately and reference whatever i is. That runs immediately at console log itself.

[03:59] However, after one second, this entire loop has already gone through every iteration that it needs to and the variable i, here, is being overwritten every single time. The problem with that is that by the time the first setTimeout() runs, the i variable is already at 10, and we don't have any way to reference it.

[04:20] Similarly, if you had like an AJAX request where you are looping through them, there's no real good way other than using an IFFE to reference what that i variable was at the time of running, not at the current time.

[04:34] One quick way we canfix that is if we just change var to let. What do we know about let? Let is block-scoped. Look at that this! This is a block scope, so our variables are now going to be scoped to here. I rerun this. There we go. After a second, zero through nine. We're not getting 10, 10 times. We getting it as it was declared each and every time.

[04:59] You can't use a const for that because it will overwrite itself. You can't assign the same variable twice. When we use let, it's going to scope that i variable right to our curly brackets here.