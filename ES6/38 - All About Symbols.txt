[00:00] [music]

Host: [00:02] There's a seventh primitive type that's been added to JavaScript. What are the existing six primitive types in JavaScript? We got number, string, object, Boolean, null, and undefined. Now we have a seventh one, which is a symbol.

[00:13] Symbols are pretty simple, but they take a little bit to wrap your head around, because I don't think that a lot of people were actually asking for these things in the language. But I can see where it would be useful.

[00:24] Symbols are unique identifiers. They pretty much help us avoid having naming collisions. Anytime that you want to create a property in a unique way, that's when you should reach for a symbol.

[00:42] Let's take a look at a symbol right here. I say const Wes = symbol, and then you pass it. This is not a value. This is what is called a descriptor. The symbol itself is just a unique identifier.

[00:54] If you were to visualize what a symbol would be, maybe you could visualize it as something like this, "absolute unique symbol," so I can make sure that it never overrides any other piece of code in there.

[01:07] This right here, that's just a descriptor. Because otherwise, I would have no idea what that actual thing is, so I've described it as Wes here. If we go into our console and type in Wes, the variable, you'll see that it is then a actual symbol.

[01:21] What's cool about this is if I create a second symbol, like person, and I create a symbol here with Wes again, are those two things going to be the same because I described them as the same thing? Let's see. Wes, person, Wes = person? No. What about like ==. No, not allowed either.

[01:44] That's one thing that you need to know about symbols, is they are absolutely unique, and you'll never have a naming collision with them. That could be useful if you were creating an object of your class, so I say const class =...Don't make it class. That's a reserved word.

[02:01] Const classroom =, and you wanted to name everybody off. Maybe you have Mark. You say Mark, his grade is a 50, and his gender is a male. Then you have another, Olivia, grade is a 80, gender is female. Then you have another Olivia, because these days every person born is named Olivia. You've got a naming collision there.

[02:36] You could put some sort of guarantee unique identifier and hope that they never overlap, but that could run into issues, especially when you have a lot of data. Think about if you were doing some 3D work or working with Canvas, where you have millions and millions of pieces of data that you're working with at a single time.

[02:55] Rather than using the person's name or some sort of unique identifier, we can use a symbol to name them. Here, we'll say symbol of Mark is this one. Then we'll do the same for both of the Olivias...

[03:15] [pause]

[03:15] The square bracket symbol Olivia. Even though these are the exact same things, now they're not going to be overwritten if we refresh. Now, if you look at classroom, you'll see that we've got symbol, symbol, symbol, and you would be able to see them.

[03:40] Another thing we need to know about symbols is that they're not enumerable, which means that we cannot loop over them. Watch, if I were to do use form person in classroom...Remember, I'm not using "person of" because you cannot use "of" within object in order to console log the person, I get nothing. Why? Because symbols aren't enumerable.

[04:07] For that reason, sometimes people use them to store private data, because you're never going to be looping over any of your symbols. Maybe if you had information about someone that you didn't want to be looping over, you could store that data in an actual symbol.

[04:21] If you do want to get access to all of your symbols, because obviously there's some information that you would want to get here, you can use the object method, get own property symbols. I'll say, object.getOwnPropertySymbols, and then you pass it, the object you want to grab all of the symbols off of, so pass it classroom here. I'll just say const syms =, and then we'll console log the syms.

[04:44] Let's see what we got here. What that gives is an array of just the symbols themselves. Remember that the symbols aren't the actual object here. The symbols are just the property keys that are inside of classroom.

[04:59] How do I actually get the data? There's no data in here at all, and look, these two things are exactly the same. But if I were to then take all of my syms, symbols, let's say const data =, I can map over each of those symbols, and take each symbol and return classroom square bracket sym.

[05:23] Why? Because the symbol is the equivalent of something like that, and it's going to be able to pull back Mark, Olivia, and Olivia, even though these two things are exactly the same. By using that symbol as the property key, I'm now going to be able to access my data. Let's see it console log the data here. There, that's how you actually get it.

[05:46] A little bit of a workaround, but if you do need to ever store some private data, or you want to make sure that your keys in your object are absolutely unique, that's when you should reach for a symbol.