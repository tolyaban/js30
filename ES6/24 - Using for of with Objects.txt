[00:00] [music]

Host: [00:02] Now there is one thing that we have not been able to iterate over, and that is the regular, old, plain object. Plain object is not an iterable, so I've tried to use for const prop of Apple, and I tried to console log property.

[00:17] When we try that, it tells me that there is no symbol.iterator. We'll talk a lot more about what symbols are in those videos. For now, what we need to know is that you cannot iterate over an object.

[00:28] What are some of our options? There is going to be an object method called entries. Just like we used .entries against our array, we're going to be able to do .entries against an object.

[00:41] We don't have that yet, but if you take a look at the TC39 proposal here, we'll see that object.values and object.entries, they are in stage four and they will be included in ES2017.

[00:55] Those are coming, and you can already polyfill it. We'll talk a lot more about polyfilling, but if you would like to use that simple solution, you can go ahead and you can use .entries.

[01:06] If you cannot use a polyfill, let's take a look at some of our other options here. We could do this, object.keys. Now, what does that do? Object.keys will take in an object, like an apple, and it will return to us an array of all of the keys.

[01:29] We don't have values yet, and we don't have entries yet, but we can get the keys. What that will do, let's see, color, size, weight, and sugar. If you want to be able to get the value, we'll say const value=apple, with the prop in it. Then we should be able to console log the value prop.

[01:54] Not the cleanest solution, because you sort of have to reach outside to get this object here, but that will work for you if that's exactly what you need to use. Pick your own, of course you can always use your regular, old for-in. That is going to give you a very similar one, you don't need to mess with any of those.

[02:14] My recommendation is until we have objects and entries, let's stick with just using a for-in for objects.