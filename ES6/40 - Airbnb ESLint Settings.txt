[00:03] Man: Engineers at Airbnb, particularly this really nice JavaScript style guide, that shows you how to write ES6 in a way that is consistent across all of your projects. It does things like it tells you to use const and when to use let and how to write your if statements and where do you semicolons and etc., all that information, and the ESLint file is sort of the enforcement of this actual style guide.

[00:28] What a lot of people do, is they adapt the Airbnb style of coding and then they'll sort of just use their own settings on top of it, and that's exactly what we're going to do here today. We're going to implement the Airbnb style guide and then we're going to sort of go through in and pick off little things where we believe that our style differs a little bit.

[00:46] Go to github.com/airbnb/JavaScript click on packages, click on eslint-config-airbnb and it's going to show us how it actually works. To install someone else's style guide you can go to your eslintrc and instead of extending the ESLint recommended we're going to extend the Airbnb, and I'm going to show you what happens if we just change that.

[01:11] Go back to our console here and run ESLint against it, it's going to give us an error here cannot find module eslint-config-airbnb, why can't we do that? Because we haven't yet actually installed it. Now, you can install this locally to your project if you only need it on one project. But since, I like to use it on every single project that I'm working on I like to install it globally.

[01:34] Now, there's some install instructions right here and what I like to tell people do is just go ahead and copy those install instructions and paste them into here. Then there's a few things that's going to install ESLint for us, we already have that, we don't need it.

[01:48] We need the accessibility JSX plugin. If you aren't writing React you still need to install that just because all of these things here were called pure dependencies for ESLint and it needs to have them all installed for us. We get eslint-airbnb-config, we get the import plugin, we get the React in the JSX accessibility one.

[02:08] Next, we want to install this globally so change --save-dev to -g and go ahead and just copy and paste that right into your terminal here. Again, if you are running the computer where you've not yet fixed your npm you might have to type pseudo and then paste in npm-install. It's going to ask for your password. You can type it in, you won't see anything but it will work and then just give it a second while it goes ahead and installs all of these elements.

[02:35] If that has worked properly we should now be able to ESLint bad code and it's going to tell us all kinds of new errors that have been happening with our actual code right here. Let's go through a couple. First of all there are a whole bunch of errors that have to do with spacing, a space is required. Those are just such minor little things that ESLint will actually fix them immediately for you.

[03:01] Right here I have this space where I shouldn't have done it and I could go one by one and fix them all. However, ESLint provides a --fix option. You can say ESLint bad code--fix and what it does…See? It went from 12 problems down to 2 problems, I go back to this code and you see that it just refreshed itself there. It's going to fix almost all of those little spacing issues for us. Now we've got two other problems here that are actually running.

[03:35] First of all unexpected var use let or const instead, that's on line one, let's go back up here. I'm looking at this, I said var whether = new Promise, so I'm not going to be using var, should I use let or should I use const? Now the question here is will I ever reassign whether, does it need to update itself or is it always going to hold this whether promise?

[03:58] In the case of us we're always going to be holding the whether promise so we use const, good, and we give that a save and rerun it. One more error, unaccepted block statement surrounding arrow body and this is the arrow-body-style. It may not actually know like what is the problem here, let's go check it out.

[04:17] Line 25 it's telling us unexpected block, that's this thing right here surrounding arrow-body-style, it actually doesn't tell us what the issue is. The issue with here is that we have a block statement and then all that block is doing is returning. What it actually should be telling is that you should use the implicit return if all that you're going to be doing is opening up a block and returning one thing from it.

[04:46] Let's go look at arrow-body-style -- read the docs here. Arrow functions have two formats. They may be defined with a block or it's a single expression, so it shows us some examples of when you wouldn't want to do it and when you would want to use it. OK, interesting. I like that error, so I'm going to not turn it off in here but I'm going to actually go ahead and fix that myself. We don't need a block here, we don't need this return, we don't need the opening block.

[05:19] Now, this is going to immediately return promises.all, give that a save, now we'll run back to our terminal and rerun ESLint, and it should like celebrate or something and tell you that you did a good job but it's simply just like "Yeah, of course, you did a good job." It's working for us, there we go.

[05:38] So far we've been working with the local.eslintrc file and that means that we have an ESLint file for every single project that we work on. That can be really handy when you have different coding styles amongst different projects or different teams that you work with. However, it's also helpful to have a global eslintrc file, which if you do not have an ESLint file present anywhere inside of your project, it's going to use your global one as sort of a default.

[06:03] I really like to do that so I don't have to create an ESLint file for every single project or I have one that I can copy/paste into new projects that I'm going to put up to GitHub and expect others to follow that coding style. I'm going to open up my global one and it lives in your home directory.

[06:20] What's your home directory? Your home directory is tilde, and that is your folder by your username on your computer, and in Windows is going to be under C, users and then your username. If you do not have one you can do touchtilde/.eslintrc, if you already do have one you can just open it up in your editor and…I'm going to show you exactly what is inside of mine.

[06:45] I've been extending Airbnb just like we have in here, I've work in the browser node and sometimes I use jQuery so I've turned all of those on then I have all of these rules that I have been working with. Now, I take all the rules from Airbnb and then these are the ones where I don't necessarily agree a hundred percent with Airbnb's implementation so these are just the once that I've sort of taken over.

[07:10] Let's take a look at one comma- dangle. I've turned that off, if I write some code right here and I'd say like const west=open up an object and I say age is 100, and cool, is true, and I give that a save and let's try the ESLint, our bad code again. It's going to yell us. A whole bunch of stuff, first of all, no-unused-vars, that's good because I've created a variable and haven't yet used that.

[07:38] That's actually one that I have turned to a warning in my regular ESLint right here, no-unused-vars because I say, "Yeah, I should know when I don't use a var but often I'm coding and like I'm not done my application yet and it's already yelling at me for my errors." What I would do is I turn that to an actual warning. Let me head to my local ESLint here, and I'll say no-unused-vars, that's going to be a 1, which is a warning, and I'll rerun this and now it's just warning me instead of actually making an error.

[08:14] Back to this comma- dangle here, what is the actual error? Sometimes people will say that you should absolutely always put a comma even if you don't have another line. That's because if you have checked something into Git, let's say that was my Git status right now and then I add a new line like dog is "Snickers," you know that I just modified that line and this line when I really just wanted to add this one line.

[08:37] People always put that dangling comma on the end and I actually generally agree with that but I don't use it every single time and I find it to be a bit of a pain that it errors out on me, so I've turned it off in my ESLint with the comma-dangle here. You might see this where people pass in array instead of just a 01 or 2, and this is where you can pass options.

[08:59] Some of these options here have the ability to pass things as needed props. In this case I said no-unused-vars except when the variable name is res, next or error. And where is that helpful? For me I write a lot of node JS where I'll do something like this, apdocget/accounts and then I'll run a function here, so it was like request and response.

[09:32] I might be doing something, and also it maybe pass, next, I like to set up all my routes like that and I might not necessarily use res or next but I like to have them there in case I need to use them again. In this case it's going to yell at me that I haven't yet used res or next. What I've done is I've set them to simply just give me a warning when I haven't use a variable. However, if I use res, next or anything that starts with error then don't worry about that at all.

[10:05] Now, I'm not going to sit here and go through every single rule in all of ESLint and sort of explaining what you should and shouldn't use. What I honestly think that you should do is start with Airbnb and just start writing code and over the next like couple of days what's going to happen is you're going to come out, you're going to trip over errors, you're going to say, "Why is that error there?"

[10:21] Go ahead and go to the ESLint docs, research it, see if it's actually a rule that makes sense for you and your team. If it is, make sure you keep it in your rules. If it doesn't, take it out of your rules or sent it to warn instead of actual error.

[10:35] A lot of times people ask me, "Hey, Wes can I just take your ESLint?" I think that is OK, however I maybe even prefer that you just start with nothing and just learn and build your own as you start to go through this.