[00:00] [music]

Wes Bos: [00:02] We have three ways to declare variables in JavaScript. We've got var, which we've always used. Now we have two new ones, which is let and const.

[00:11] These two have some attributes about them which are going to be helpful for us [inaudible] , but we first need to do a quick, quick, quick review of the var keyword in order for us to understand the benefits and just the differences between let and const.

[00:24] First thing that we need to know about var variables is that you can reassign them. You can also update them. Let's console log the width, and we'll update the width to be 200, and then we'll console log the width again.

[00:38] When we refresh this, you see we get 100, 200. Not a big deal. We're able to update them. What you can also do is you can put a var in front of it.

[00:45] Now, this is not something you should ever do, but we've all been there where we run out of names for variables and we accidentally use the same one over again. What's going to happen here is it doesn't do anything. It works as you'd expect, but it doesn't yell at you for creating the same variable name twice in the same scope. That's one thing about var variables is that they can be updated or redefined.

[01:08] Another thing we need to know about var variables is how they are scoped. Scoping essentially means, "Where are these variables available to me?" Var variables are function scope, which means that they are only available inside the function that they are created. If they're not created inside of a function at all, like the case is right here, they are globally scoped. They're available on the window, which is why we can type width into DevTools here.

[01:34] But what if I created a function here and put my var width inside of it, and console logged the width, and then I were to run it? Is that going to work? Of course, it's going to work because this width is available inside of this function.

[01:46] What if I also tried to console log the width after I've set the width? Is it going to work? It doesn't work. Why doesn't it work? Because width is only scoped to that function. It is a local variable to this function. It is not available outside the confines. I like to think of these curly brackets of your function as gates, and they are not available outside the gates. They're in function jail, [laughs] as far as you can think about it.

[02:13] That's important for us to know. What you could do is you could say "var width" above here, and you could just update it instead. Now, we've globally scoped a variable and we're updating it. That should work.

[02:26] Generally, it's probably not what you want to do. You want to keep your variables inside of your function. If you need something outside of it, you want to return it and store that in a variable. That's something that we need to know about function scoping.

[02:38] I'm going to show you a use case where function scoping sort of comes back and bites us. Let's say we have an age variable and we have an if statement. We want to create a number of dog years. If they are greater than 12, let's calculate their ages in dog years and console log, "You are dog years old."

[03:11] If they are greater than 12, we just want to console log. I'm using [inaudible] in this. We're going to learn all about this in the "Template Strings" video. We'll give that a save, and it works.

[03:22] The one thing that is a little bit funky here is that this var right here, dog years, this was just a temporary variable. I just needed this real quick in order to calculate something and then stick it into a console log or stick it into a string somehow.

[03:38] What if I go into my console and I type dog years? [gasps] Look, you can now see that dog years, it leaked outside of this if statement and it is now a global variable. It has now leaked.

[03:50] Even though this was a temporary variable that I only needed inside of this if statement, because var variables are function scoped -- there's no function here -- so it's not going to scope it to that function. It only has scoped it or it has scoped it to the entire window, which is a little bit of a pain here. That is one of the benefits to using let and const. Rather than being scoped to the function, it is scoped to the block.

[04:19] What is a block? Here is a great example. Any time that you see an open and a closing curly bracket, that is a block statement. Functions are also blocks. They're still going to be scoped to a function. However, if inside of that function or if inside of some other element that you have, it will then be scoped to that set of curly brackets.

[04:41] If I now take this dog years here and change it to let, and I refresh, everything works as we would want. But now if I type dog years into here, it says, "Dog years is not defined." Why? Because I declared it as a let variable. It is only declared inside of a block scope, now, not a function scope, a block scope, and that temporary variable has not then leaked out.

[05:06] Similarly, we can also use a const variable here and it will work just the same. If I type dog years, we have, "Dog years is not defined." Let and const, one of the attributes of both of them is that they are block scoped rather than being function scoped.

[05:22] In the next video, we're going to take a deeper look at some of the other attributes of let and const variables.