[00:00] [music]

Instructor: [00:03] A WeakSet is just like a set, except there are a number of limitations, or I guess you could say benefits to using a WeakSet in some situations.

[00:11] We create it just like we would before, and you can pass it an iterable of items, so dog1 and dog2. I could also have done WeakSauce.add dog2. Let's check it out, WeakSauce, there we go. I can say .hasDog1, that is true, .hasDog2.

[00:35] The important thing that we need to know here about a WeakSet is that a WeakSet can only ever contain objects. It cannot contain strings, or numbers, or arrays, or anything else. It can only ever contain an object. Now, we'll see why that's important in just a second. That's one thing that we need to know about it.

[00:55] The other thing we need to know about it is you cannot ennumerate, or you cannot loop over it, so we couldn't do our for constDog of WeakSauce and then console.log dog. Watch the error that it gives us, symbol.iterator is not a function. There is no iterator on a WeakSet like there is on an array, or on a set, or any of the other things that we can use a for of on, so that's out the window.

[01:22] You might be thinking, "Well, that's kind of weak. Why would I ever want to use that?" Really, the last thing that we need to know about a WeakSet is that there is no .clear method. If I have my WeakSauce here, there is no .clear method that I can call against it, and I'll tell you why. 

[01:41] Because the WeakSets sort of clean themselves up. This has everything to do with garbage collection and memory. What that means is that when the reference to one of these dogs no longer exists, for example, if we were to delete one of these dogs, then it would automatically be garbage collected, which means it would automatically be taken out of our WeakSet.

[02:05] We have the set that is weakly held, which means that things can just automatically go away because if they're deleted in the code that you're running, then they are going to be also deleted from the set.

[02:20] To demonstrate that, what I'm going to do is set dog1 to be null, and I'm just going to console.log the WeakSet right here. When does garbage collection happen? It really depends on your browser and a whole bunch of other things. There's no way to force it. But generally what you can do is you can wait for a couple seconds and you'll see that the WeakSet has been gone. 

[02:40] We're going to conole.log the WeakSet here, and then I'm going to console.log WeakSet here. We'll see if that does anything. Not the WeakSet, the WeakSauce. Poor name. 

[02:50] Here we deleted dog1, but it's still in here. Does that mean we still have...That's what's called a memory leak to some people, where you reference something that cannot be a reference otherwise.

[03:04] I've just waited here a couple seconds now, and let's type it in, WeakSauce. Now it's gone. You see how Snickers is no longer in there? It's because we deleted it in our JavaScript, and the WeakSet ran a garbage collection that says, "OK, who of my items no longer exists? Because get out of here, we don't need you any longer. You've been garbage collected."

[03:28] Not a whole bunch of use cases for that, but if you're storing like a DOM node or any type of other object, then you don't have to make sure that...Even though you delete the actual reference to the object, you don't have to worry about it also being in an array or something somewhere and causing a memory leak. You'll know that the WeakSet is going to take care of it for you.