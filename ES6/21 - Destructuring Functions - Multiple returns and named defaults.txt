[00:00] [music]

[00:02] Instructor: There's a couple of other things we can do with destructuring, and they all are related to functions. They're actually very handy. 

[00:08] Let's go through this function really quickly. It's a convert currency function that takes an amount, like 100 bucks, and it's going to return an object that has US, pounds, Australian dollars, and Mexican bucks, pesos. 

[00:24] We run it here with $100 Canadian, and it's going to return to me this object here. When I console.log that object we see that we have all these values here. Pretty simple. 

[00:35] Previously, if I wanted to get the Australian dollars I would say .AUD, and then if I also wanted to get the Mexican pesos I would .MEX and I would get those values like that. However with destructuring, you can sort of return multiple values from a function. 

[00:54] What I mean by that is you can't really return multiple values, but you can return an object and destructure the answer from that. Rather than just console.loging hundo, I'm going to destructure immediately as it comes back, and say USD, GBP, AUD, and MEX. 

[01:16] Now I should be able to take these values and console.log them individually, and you know that we get them. If I type one of them in here, I see them individual, so it didn't need that variable with all the properties on it. I can destructure them all into four separate values as I want.

[01:34] Another cool thing about it is that you do not need to care about the order in which they come out, because it's just an object, so I could put this in any order that I would want and it would still work just fine. 

[01:47] Especially what's cool is that if you only need Australian and US, you just don't need to destructure the rest of them, and they will never show their face. They're simply just going to be returned for this function and destructured immediately. The other two will just be thrown out. I can console log USD and Australian dollars here. Cool. 

[02:10] That's two things there, where you can return multiple values as well as pick and choose the pieces that you want returned from a function. 

[02:18] The other one is default named arguments. We already went through that last example, where we had a function called a tip calculator. We had the total, and we had the tip, and we set that to default 15 percent, and then we had the tax, which we set to default 013.

[02:36] That works well, because we know that the first thing is going to be total, second thing is going to be tip, or was it tax? I don't even know now. Then the third one was tip or tax. You see, I'm already getting confuse as to the order. Which order should I actually put them in? I might end up tipping too much, or maybe not enough.

[02:55] There's some things we can do to make this order independent. The first thing I'm going to do is just finish off this function here and return to total, the tip times the total, and tax times the total. 

[03:05] Then I'm going to wrap these three arguments in curly brackets. What that's going to do is that, when we pass in an object it's going to destructure them into three variables total, tip, and tax, so it is not like we're going to have to say options.total, options.tip. It's going to destructure them into three variables available inside of this actual function. 

[03:28] Then when we call it, we simply run tipCalc and we pass it an object with the total value. Maybe that's going to be $200. We pass the tip at 02 and we pass the tax at 013, or whatever it is. I'm going to put that in a variable, give this a refresh. Now we've got $266. That's the total.

[03:56] But what is really important here is, first of all, I can leave off things. We don't have to pass that undefined sort of hole-filler, if it's in the middle. Still works just fine. The default tax is going to kick in, as well as, I can put them in any order that I please. Maybe I want to put the tip first and the total goes second. It still works just as we want.

[04:18] We're passing in an object here, and it's getting destructured, as well as, if we leave the one out from the object that we pass in, the defaults are filling themselves in. 

[04:29] One last thing is, if you ever are to just pass in nothing...Let's say if we put a default for the total be 100 bucks. This is maybe a common order and we would want to just run tipCalc.

[04:46] What happens here? We get an error because it cannot match against undefined or null. It's a destructuring error, and that's because we have passed in none of these things. We passed in no object for to destructure against, so you have to give it, itself, a default argument, so that if the entire argument which is one object, if no object is passed it's going to default just to a blank object and all of the three are going to be in.

[05:15] This is a little bit of a funky syntax, so it takes some times to get comfortable with it. Maybe try it out throughout your work day, but it's definitely worth getting used to, because it's going to really help you reduce a lot of your boilerplate code where you're checking for defaults.