[00:00] [musique]

[00:02] Instructeur: Nous savons que var a une portée limitée par les fonctions. Nous savons que let et const sont limités par les blocs, qui correspond à l'intérieur d'un ensemble d'accolades. Maintenant, nous avons besoin de savoir si à l'intérieur du périmètre où la variable est déclarée, nous ne pouvons la déclarer qu'une seule et unique fois.

[00:15] Si je tente de faire let points = 60 ici, il ne va pas me laisser faire. Il va me dire que points a déjà été déclarée. Alors qu'avec les variables Var, il continuera de marcher sans aucun avertissement. Cela peut causer beaucoup de bugs dans vos applications, parce que vous pourriez accidentellement utiliser la même variable deux fois. 

[00:33] Vous pouvez, bien sûr, mettre à jour la variable let. Nous regarderons plus en détails les différences entre let et const dans les vidéos à venir, mais vous ne pouvez pas les redéclarer deux fois dans le même périmètre.

[00:41] Maintenant, et si j'avais ceci ? Si points > 40, nous dirons que let winner = true. Sauvegardez, rafraîchissez, pas d'erreurs, c'est autorisé. Mais si je cherche à accéder à winner, qu'est ce que je vais avoir ? À vous de me le dire.

[00:55] Nous avons... Oh, mais ça marche. Est-ce que ça marche? Console.log, ça marche. Voyons voir, est-ce que ça a vraiment marché? Ça a marché. Pourquoi est-ce que "winner" est toujours à false, si nous l'avons mis à true ?

[01:09] Le point important ici est que ces deux variables sont deux variables séparées. Elles ont le même nom, mais ont des portées différentes. Ce "winner" ci, a une portée reliée au "window". Ce "winner" là, parce qu'il a été déclaré dans un bloc -- regardez, c'est un bloc juste ici -- sa portée est limitée par ce bloc de code.

[01:29] Si je change ce let winner, et j'ai changé ces deux pour être des var, et si je rentre "winner", "winner" est maintenant à true. Pourquoi ? Parce qu'il n'est pas à l'intérieur d'une fonction, sa portée n'est pas délimitée, alors qu'une variable let l'est. C'est une chose à retenir.

[01:44] L'autre point important à savoir est la différence entre let et const. Const ne peut pas être modifié. Les variables let sont faites pour être modifiables. Je peux écrire points = 60, et ça marchera bien. Nous voyons 60. 

[02:01] Cependant, j'ai cette clé, peut-être quelque chose que je ne veux pas pouvoir être modifiable; "const" signifie "constant". Si j'essaie de changer la valeur -- key = a, b, c, 1, 2, 3, 4 -- il va nous crier dessus parce que "affectation à une variable constante". Vous ne pouvez pas mettre à jour une variable const, alors que let le permet.

[02:21] Nous allons approfondir les exemples et vous allez comprendre où j'utilise lequel au fur et à mesure que nous avançons, mais c'est tout ce que nous avons besoin de savoir pour le moment.

[02:28] Rapidement, un dernier point est que parfois, les gens pensent que const signifie que la variable est immutable, ce qui signifie que si j'ai un objet comme const person =... Je vais dire que name a pour valeur "Wes" et l'âge a 28, j'ai cette variable "person". Mais si je tente de modifier sa valeur en autre chose -- le nom sera "Wesley" -- il ne me permet pas de le faire.

[02:52] Cependant, les propriétés d'une variable const peuvent changer. C'est parce que l'objet entier n'est pas immutable. Il ne peut juste pas être réaffecté. 

[03:02] L'image que j'aime avoir à propos d'un objet est que l'objet "person", c'est moi. Je ne vais jamais changer, pas ma vie entière, mais des parties, des attributs de moi, vont en effet changer. Peut-être mon âge, ma couleur de cheveux, où je vis. Il y a des choses à propos de moi qui vont changer. Ça ira, aussi longtemps que l'objet qui est affecté à Wes est toujours le même objet.

[03:22] Je peux tenter de faire person.age = 29 et nous avons l'objet person. Ça marche bien, mais je ne peux pas remplacer entièrement toute ma variable. Si vous avez besoin de geler tout, nous avons quelque chose appelé object.freeze. Ça ne fait actuellement pas partie de ES6, mais vous pouvez jeter un coup d'oeil à ce sujet sur MDN, et vous pouvez l'utiliser sur "person". Disons const Wes = object.freeze. 

[03:48] Maintenant, j'ai une variable Wes. Si j'essaie de faire Wes.age = 30 et que j'affiche Wes.age, ça dit toujours 28. Je ne peux rien changer dans cette variable.