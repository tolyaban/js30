[00:00] [música]

Wes Bos: [00:02] En Javascript hay 3 opciones para declarar variables. Tenemos var, que es la que siempre hemos usado y hora tenemos dos nuevas let y const.

[00:11] Las dos nuevas tienen ciertos atributos que nos serán muy útiles, pero primero tenemos que hacer una revisión rápida de la palabra clave var para poder entender sus beneficios y las diferencias entre let y const.

[00:24] Lo primero que necesitamos saber de las variables var es que las podemos reasignar y también actualizar. Usemos console log para ver el ancho(width), luego actualizaremos el ancho a 200 y finalmente usaremos console log para ver el ancho otra vez. 

[00:38] Cuando actualizamos puedes ver 100, 200. Nada sorprendente, podemos actualizar los valores. Lo que también podemos hacer es poner var antes de ellas. 

[00:45] Aunque esto es algo que no debemos hacer, todos hemos estado en la situación que se nos acaban los nombres para las variables y accidentalmente usamos el mismo varias veces. Esto funciona como esperaríamos, pero no nos notifica por crear la misma variable dos veces en el mismo ambiente(scope). Esta es una característica de las variables var, pueden ser actaulizadas o redefinidas.

[01:08] Otra cosa que debemos saber acerca de las variables var es en que ambiente estan definidas. Definir un ambiente significa "Dónde estan estas variables disponibles para mi?" Las varibles var son ambientadas por función, esto significa que sólo están disponibles dentro de la función en la que fueron creadas. Si no fueron creadas dentro de una función, como en este caso, están en el ambiente global. Éstas estan disponibles en window, y es por esto que podemos usar width aquí en la consola.

[01:34] Pero qué pasaría si creamos una función aquí, luego ponemos la variable width dentro de ella, usamos la consola para mostrar el valor de width y finalmente ejecutaramos ? Funcionaría ? Por supuesto, funciona porque este width está disponible dentro de esta función.

[01:46] Y si tratamos de usar la consola para loguear width después de haberla asignado ? Funcionaría ? Este caso no funciona. Por qué no funciona ? Porque width sólo está disponible en el ambiente de esa función. Es una variable local en esta función y no está disponible por fuera de este ambiente. Me gusta pensar que las llaves {} son las puertas de la función y las variables no están disponibles por fuera de las puertas. Podemos pennsar que la función las tiene encarceladas [risas].

[02:13] Es importante para nosotros saber esto. Lo que podriamos hacer es poner var width acá arriba y luego la podriamos actualizar. Ahora hemos declarado la variable en el ambiente global y la estamos actualizando. Esto debe funcionar.

[02:26] Generalmente, esto no es lo que queremos hacer. Queremos mantener las variables dentro de nuestra función. Si queremos algo afuera de ella, queremos retornarlo y almacenarlo en una variable. Esto es algo que debemos saber acerca de los ambientes en funciones. 

[02:38] Voy a mostrar un ejemplo en el que limitando al ambiente de la función se nos presentan complicaciones. Digamos que tenemos una variable age y que tenemos una condición if. Queremos crear un número que represente los años perrunos. Si son mayores que 12, calculemos sus edades en años de perro y mostrémoslo en consola "You are dog years old."

[03:11] Si son mayores que 12, los mostramos en la consola. Aquí estoy usando [inaudible]. Aprenderemos todo acerca de esto en el video "Template Strings". Guardamos y funciona.

[03:22] Lo único que es un poco extraño es esta variable dog years, pues era una variable temporal. La necesitaba para calcular algo rápido y luego mostrarlo en la consola o agregarlo a la cadena de alguna manera.

[03:38] Que pasaría si vamos a la consola y escribimos dog years? [suspira] Mira, podemos ver dog years, se filtró afuera del condicional if y ahora es una variable global. Ahora esta infiltrada. 

[03:50] Aunque era una variable temporal que sólo necesitábamos dentro de este condicional if, esto es porque las variables var son ambientadas en funciones -- pero acá no hay ninguna función -- entonces no se puede limitar a una función. Por esto se ha limitado al ambiente de window, lo cual es un poco inconveninte aquí. Esta es una de las ventajas al usar let y const. En vez de estar ambientadas en funciones estas limitan su ambiente a bloques. 

[04:19] Qué es un bloque? Aquí tenemos un buen ejemplo. Cada vez que vemos una llave abriendo y otra cerrando, eso es un bloque. Las funciones también son bloques. Ellas van a seguir perteneciendo al ambiente de la función. Sin embargo, si dentro de la función ó dentro de cualquier otro elemento que tengamos, estas estarán limitadas al ambiente definido por el par de llaves.

[4:41] Si tomamos aquí dog years, lo cambiamos a let y refrescamos, todo funciona como queríamos. Pero si escribo dog years acá, la respuesta es, "Dog years is not defined." Por qué? Porque la declaramos como una variable let. Sólo está declarada dentro del ambiente del bloque, no en el ambiente de la función, un ambiente de bloque. Por esto ahora la variable temporal no se ha filtrado.

[05:06] Similarmente, podriamos usar una variable const aquí y funcionaría igual. Si escribo dog years tenemos "Dog years is not defined." Let y const comparten esta característica, ambas son limitadas en el ambiente de un bloque y no en el ambiente de la función. 

[05:22] En el siguiente video vamos a profundizar en otras características de las variables let y const.