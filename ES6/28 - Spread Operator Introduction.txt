[00:00] [music]

[00:02] Man: Let's talk about the spread operator. Those are those three apathetic dots that you'll often see in front of an array or any iterable. What is the spread operator? The spread operator takes every single item from an iterable. Now hold on. What's an iterable?

[00:19] An iterable is anything that you can loop over with our for of loop and that includes arrays, includes strings, includes DOM nodes, includes arguments object, and includes our maps and sets which we are going to learn. What is that? We'll use strings and arrays, because that's the simplest. That's probably most of the uses cases where you'll actually use this.

[00:41] It's going to take every single item from an iterable, from array and apply it to the containing element or the containing array. Where is that useful? Let's say we've got this featured and the specialty. I want to make a third array called pizzas, just combine them together. You might think, OK, we're going to const pizzas =, and how do you combine them?

[01:05] You just take one, and then you call .concat against it, and you pass it the second one. That will work. Let's see here. Console log pizzas, and that works. What if you wanted to put vegetable pizza right in the middle of that? How would do that? Well, you'd have to say let pizzas =, you would have to make a new blank array.

[01:32] Then say pizzas.concat = pizzas.concat featured. You got pizzas.push veg and then pizzas.concat again specialty. You have to say pizzas = you have to overwrite the entire thing or we're using let there. That just becomes a big headache for having to manage that. What you can do is, you can take every single item in the array and spread into a new array.

[02:01] Let's take a quick example with a string first. If I have the string of Wes, what is every item in a string? Every item in a string is just each character. What you can do is you pop an array around it, and that just gives you an array of one thing. What if I wanted every single item of that iterable to be its own item of the array?

[02:25] Inside of that dot, dot, dot, that's going to spread each item into the actual array. I have W-E-S as the entire array here. Similarly, what we can do is, we can take these existing arrays and spread the items, like featured, and spread the items of specialty into the new pizzas array. We'll make that back to const, because we're not going to be overwriting it here.

[02:53] Now, I should be able to have these pizzas array, which has absolutely every single element in here. Similarly, I can just also add veg in the middle of it. It's not a problem because I'm essentially just saying, add every single item from here, add vegetable, add every single item from specialty and we should be good. Let's take a look at what pizzas is now.

[03:15] Then we see vegetable being added right in the middle. What's also nice about that is that, if you even want to copy an array, how did you do that before? Let's say we wanted to take a copy of these pizzas. We'll say const Friday pizzas =. If you just do pizzas, what happens here? Let's take a look. Pizzas, and the write a pizzas is the same thing.

[03:44] What if I wanted to change from the first Friday pizza from deep-dish to something like this, Canada pie? Now Friday pizzas, what does that look like? The first one is Canada pie, we've replaced deep-dish. Now,what is pizzas? Shit, now we overwrote the initial pizzas one. That's a pain, because what we did there is we didn't actually copy this array.

[04:15] We just referenced the pizzas array. Pizzas and Friday pizzas, they are the exact same thing. What you used to have to be able to do is you just create a blank array and then you would concat the pizzas one right into it. That would just take a actual copy of the array rather then reference it. That's weird as well.

[04:31] What you can do is, you just take a brand new array and then you spread every single item from pizzas into this fresh new array. I should be able to go here and look at my, let's change it. Let's change Friday pizzas and see where we are at. Good, but if I say just pizzas, deep-dish is still there. I wasn't destructive to that initial array.

[04:59] Again, a spread will take every single item from an iterable and apply it into the new array. Let's take a look at some more examples as to when you would actually want to use this.