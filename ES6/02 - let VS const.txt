[00:00] [music]

[00:02] Instructor: We know that var is function scope. We know that let and const are block scope, which is any time you've got a set of curly brackets. Now, we need to know that inside of the scope where the variable's declared, you can only ever do that once.

[00:15] If I try to go let points = 60 here, it's not going to let me. It's going to say points has already been declared. Whereas with var variables, it will just go ahead and work for you without warning you. That can cause a lot of bugs in your actual applications, because you might accidentally use the same variable twice. 

[00:33] You can, of course, update a let variable. We'll take a look more at let versus const in the future, but you cannot redeclare it twice in the same scope.

[00:41] Now, what if I had this? If points > 40, we'll say let winner = true. Give that a save, refresh, no errors, it's allowed. But if I type in winner, what am I going to get? You tell me.

[00:55] We get...Oh, but this runs. Does this run? Console.log, it ran. Let's see, did it actually run? It ran. Why is winner still false, if we set winner to be true?

[01:09] The important thing here is that these two variables are two separate variables. They have the same name, but they are both scoped differently. This winner here, that is scoped to the window. This winner here, because it was declared inside of a block -- look this is a block statement right here -- it is scoped to that actual block.

[01:29] If I change this let winner, and I changed these both to be var, and I type winner, winner is now true. Why? Because it's not inside of a function, it's not scoped to it, whereas a let variable totally is. That's one thing to know about it.

[01:44] The other thing we need to know about it is that the difference between let and const is that const variables cannot be updated. Let variables are made to be updated. I may say points = 60, and that will work just fine. We see 60. 

[02:01] However, I've got this key, maybe something that you do not want to ever change; const stands for constant. If I try to update it -- key = a, b, c, 1, 2, 3, 4 -- it's going to yell at us because "assignment to a constant variable." You cannot update a const variable, whereas let you can update.

[02:21] We're going to go more into examples of these and you're going to understand where I use which one as we go through, but that's really all we need to know about it for now. 

[02:28] One other quick thing is that sometimes people think that const means it's immutable, which means that if I have an object like const person =...I'll say name is set to Wes and age is set to 28, I've got this person variable. But if I try to update that to something else -- name is Wesley -- it doesn't allow me to do that.

[02:52] However, the properties of a const variable can change. That's because the entire object is not immutable. It just cannot be reassigned. 

[03:02] The way I like to think about it with an object is that the person is me. I'm not going to ever change, my entire life, but attributes about me are going to change. Maybe my age, my hair color, where I live. Things about me are going to change. That's fine, as long as the object that is assigned to Wes is always the exact same object.

[03:22] I can go ahead and say person.age = 29 and then we have person. That works just fine, but I cannot ever wipe out the entire variable. If you do need to freeze everything, we have this thing called object.freeze. It's actually not part of ES6, but you can take a look at it on MDN and you can pass it person. Say const Wes = object.freeze. 

[03:48] Now, I've got a Wes variable. If I try to say Wes.age = 30 and I type Wes.age, it still says 28. I just can't actually change anything on that actual variable.