[00:00] [music]

Man: [00:02] ES6 has brought classes to the language. Now, this is not a new way to do object-oriented inheritance. It's the exact same prototypal inheritance that we've always had in the browser. It's just a new way to actually write them.

[00:14] What I wanted to do in this video is do a quick review of how prototypal inheritance actually works because I understand not everyone has a good grasp on that. If you are totally comfortable with prototypal inheritance, skip this video and I'll see you in the next one. If not, stick around.

[00:31] What I want to do here is let's make a dog function that will create puppies or create many dogs. I'm going to say function Dog, and I put a capital D on that because this is what's called a constructor function. That's going to take the dog's name and the breed of the dog. From that, we say this.name() is equal to whatever the person passes in and this.breed() is whatever the breed they pass in.

[00:57] I should be able to say const snickers = new Dog(). We're going to use this dog here to create a puppy, which is "Snickers." I'm going to say the dog's name is Snickers, and the breed is a King Charles. Give that a save, refresh. We have Snickers here, which is a dog -- you can tell -- and the properties on it, breed and name of Snickers.

[01:23] Now, what is prototypal inheritance? Prototypal inheritance is when you put a method on the original constructor, here, it will be inherited by the rest of them.

[01:35] Let's just talk about what is existing. If I create a new array, const names = Wes and Kate. I just created a brand new array, but now names.join() is a method; name.pop() is a method. We have all these methods on top of names.

[01:59] Where did they come from? Well, we have the MAMA array, which is capital A, Array. If you were to look inside of a capital A, Array, you'll know that that Array has many, many prototype methods. What that means is that when you create an array or when you create a dog from the MAMA array or from the MAMA dog, every single instance of that inherits those methods.

[02:27] We're going to take a look at how they don't just take their own, they actually share the same one. Let's add a prototype method here. We'll say dog.prototype.bark() =, and that is a function itself, and we'll just say console.log("Bark, bark. My name is..."), and we'll put this .name inside of there.

[02:50] Why? Because we want to reference the name of the actual dog. I should be able to say snickers.bark(). It says, "Bark, bark. My name is Snickers." Makes sense.

[02:59] If I were to make a second dog here, and we'll call that dog "Sunny."  I can say snickers.bark() and sunny.bark(). "Bark, bark. My name is Sunny." You see how this one method that it declared on the MAMA, the prototype here, is now inherited by every instance of dog.

[03:19] What's really cool about that is I could then change it after the fact. Watch this. I can overwrite it. I could say something like console.log("Bark, bark"), and maybe add some emojis in there, Canadian dogs. And, "My name is..." whatever and, "I'm a..." this dog breed.

[03:46] Now, when I run snickers.bark()...Even after I've created Snickers and Sunny, should it still do this? Absolutely. What if I added a second method onto it after the fact? Dog.prototype.cuddle() = function console.log("I love you owner.").

[04:12] Even though, after they were created, because I modified the dog, I should be able to say snickers.cuddle(). The way you can tell is if you just type Snickers, you open it up and you don't see bark or name here. That's because these things are specific to the instance. The name and the breed are associated with Snickers or Sunny.

[04:33] But bark and cuddle, those are on the prototype, which means that they're not part of the actual object, snickers, itself. But if you open that sucker up, you'll see bark and cuddle are right inside of there. They are inherited from the parent. So dog [indecipherable] Sunny, you see that Sunny also has access to both of those.

[04:56] With that in mind, let's learn about how we can also do this sort of thing when we write classes.