[00:00] [music]

[00:02] Instructor: A set in JavaScript is like a unique array, meaning that you can only ever add the same item once, with a nice API for managing the items inside of it. It's different than an array, in that you can't access the items individually and it's not index based. 

[00:18] You can think of a set as just a list of items, which we can add to, remove from, and loop over. Let's take a look at how it works, how the API works, and then we'll talk about looping over it. 

[00:30] I can create a new set by storing it in a variable, and then you set .add to be able to add items to it.

[00:44] Open this up in my browser and type people. You'll see that we now have a set. It looks very similar to an array. Information about the set, you can say people.size. It's not .length, and that's because they can't be accessed by their index, so it's .size to get it. 

[01:00] You can list the people. You can open it up and see what we have in there. If you'd like to remove someone, you say people.delete("Wes"). You don't have to figure out where the index of Wes is. With an array, you'd always have to figure out where it is. Here, you just delete it, and people now has two items in it. We can clear everyone from the set entirely with set.clear, and that gives us an empty set.

[01:27] If I refresh this page here, and we call one of the other methods, which is entries, keys or values -- I'm going to call values on it because it makes the most sense -- what do we get here? We get, in set iterator it gives us all of the values, but also, what is a set iterator? That means that we can loop over it, or you may remember from our generators videos, that this is a generator.

[01:51] If we stick that thing in a variable, we can just call next on it. It.next, it.next, it.next, it.next, and then we're done. What that probably means to you is, "Oh, cool, I can use the generator API on it with .next or I could manually feed it right into a for...of loop." Refresh and we see Wes Snickers Kate.

[02:18] The set also has methods of keys and entries. I'll show you what that is real quick. Say people.keys. What's the difference between keys and values? Absolutely nothing, because a set is just values. Keys and values are mapped to the exact same thing.

[02:36] Then we also have .entries, which if you look at it, Wes, Wes, Snickers, Snickers, Kate, Kate. These two ones, keys and entries, those are really helpful when we actually get into map. The reason I think they're there is that we can have the same API on map and set, and we don't have to worry about if it's there or not.

[02:56] Let's take a look at another example with some students. I can say cons.students = new Set(). Now, if you want to declare the set with the values in it while you make it, you can pass it just like you would array.

[03:16] You can also create a set when you pass it an array. Say we actually have an existing array. We can take that array and just pass it into our new set. Take a look here. We've got dog set is actually a real set that's been created from an existing array.

[03:33] One other thing we can do is we can use .has to see if someone is already in it. Remember we talked about the set as being unique? If I were to take these students here, and I could call .has("Tony"), it'll say true, .has("Wess") spelled wrong, gives me false. If I add someone twice, it's still going to -- I could add it a million times -- and the property of is that it is unique.

[04:01] One more thing, as I said, you cannot reference students 1. It is not an index-based thing. It is a list, and if you need to loop over them, you have to use a for...of loop.

[04:12] That is the entire set. It's fairly straightforward. We've got add, clear, delete, size property, .has to see if it's in there, and we can use for...of to loop over it, or we can manually do it with the generator by calling .next on it.