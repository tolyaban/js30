[00:00] [music]

Wes Bos: [00:02] ESLint is an indispensable code quality tool when you're writing any type of JavaScript, especially ES6. You may have used JSHint or JSLint in the past. However, it seems to be that most of the community has moved over to ESLint, specifically because they have support for all of the new ES6 features.

[00:18] Now what is ESLint? ESLint essentially, it hurts your feelings. It looks at your code and tells you what exactly is wrong with it. 

[00:26] At first it seems a little bit overwhelming because it tells you everything is wrong with your code, but it's all a matter of, A, getting it configured properly for your coding style, and B, actually understanding why are these errors happening. In the long run, it's going to make you a much better developer.

[00:41] Let's take a look right here. I've just got some of my code right here and I popped it into the ESLint. It just starts yelling at you for all the things that you have done wrong, like let's see, on the first one, space after keyword was removed. Here we go. Extra space after the keyword conditions was using, right here, it was a little space.

[01:01] It will do little things like that, as well as catch things for you where maybe you used a variable name twice, or maybe you have an unused variable name, or maybe you use the wrong var, let, or const. 

[01:14] All kinds of different stuff where this is going to come back and bite you, and ESLint is going to catch them before they actually cause an issue.

[01:22] I'm going to go through setting it up, getting it installed, and then I'm going to show you how do you configure it and what is your process for actually understanding how it works. 

[01:31] In my experience, the first time someone uses it takes maybe an hour or two to get it really where they like it, but you're going to be writing better code and you're going to earn that time back after no time.

[01:42] There's a few things we need to in order to get started. First of all, you need nodejs and npm installed. Chances are, most of you already have this installed. If you don't know, head on over to your terminal and type node-v, and it'll tell you what version of node you have. 

[01:56] Make sure you have at least version four or up, and npm-v make sure you have at least version three or up, and that means you're in good shape.

[02:04] If you have an old version or you get an error, like node is not a command, go to nodejs.org and download the latest version. It will just give you the thing or you click next, next, next, and get that installed. 

[02:15] Once you have that installed, we need to install ESLint. The way that ESLint is going to work is we're going to type ESLint, and we're going to lint a file called badcode.js. When you run that it's going to give us either an error or actually what problems are with our code.

[02:33] To install that, you type npminstall-g. What -g is going to do is install globally on your machine, so I have that ESLint command. Then you type ESLint and hit enter. I'm not going to do that, because I already have it. 

[02:45] A lot of people on OSX, on a Mac, they're going to get a problem with permissions. You type sudo npm install, or figure out actually how to get npm install working just properly.

[02:56] If you have that properly installed, you should be able to type ESLint--version and it should tell you that you have at least version two or up, but do yourself a favor and jut download the latest version of ESLint. 

[03:11] Now, we're going to be working from the command line. I'm going to show you how to integrate it into your text editor in just a bit, but let's get it up and running.

[03:19] How do you actually get it to work? You're not going to paste it into this little box every single time you want to check your code quality. Ideally what's going to happen is we're going to have something that runs on our command line, something that runs in our editor, or something that runs on a Git hook before you commit your actual code.

[03:34] Let's start via the command line. You just type ESLint and type badcode. That's a file that I've included in this folder here. What that's going to do is it's going to scan our file and tell us what is actually wrong with it. First of all, it seems like there's a problem parsing this actual, and this is a pretty common thing.

[03:53] It's telling me it's on line 1 of column 38. If you look here at line one, column 38, that's actually where the error is. By default ESLint doesn't know about arrow functions, and this is where the settings for ESLint actually start to come in handy.

[04:10] Now the ESLint settings, you can do them globally on your computer and I'll show that in a second. Or you can do it project by project. 

[04:17] A lot of people prefer to do it project by project because there's different coding styles depending on which project or team you are working with. 

[04:25] We are going to go ahead and create what's called an eslintrc file in the folder right here, and that's going to hold all of our actual settings.

[04:37] I'm going to say touch.eslintrc. That will have created a new file called .eslintrc. Sometimes some computers hide files that start with dot, so you might not immediately see it in your Finder. However, if you go to your editor and open that folder you should see a .eslintrc file.

[04:54] Open that up, now it's going to be empty. Inside of this eslintrc file we are going to write json, which is full of all of our settings. To write json, you open up an object and we now need to specify a whole bunch of options that we need.

[05:10] What are the possible options? Well, ESLint is full of options, and it can be a little bit overwhelming. 

[05:17] Look at right here. First of all we have an environments. Where are you actually writing your JavaScript? Are you writing it for Node? Are you writing it for your browser? Are you writing amd, Mocha, Jasmine, PhantomJS, QUnit, all the way? You see that we are writing ES6 for the browser. We might also want to write it for Node.

[05:34] There's also all these different rules. This is all the possible rules that you can have. We'll look at a shortcut way, because there's no way you have time to make a decision about every single one of these rules. 

[05:46] First of all, what we want to do is say environment. We're writing json here, you must use double quotes. Nth, and here we set all the environments that we would like to write our code in. We're going to say ES6 is an environment we would like to write our code in. That is true.

[06:02] Also you may want to put the browser, since we are writing in the browser. If you are writing in Node then that would also be handy to set to true. And finally, if you're ever writing some jQuery it's helpful to put jQuery in there because otherwise it's going to complain about certain things like the dollar sign not being defined when it clearly is.

[06:19] I'm going to keep it just at ES6 and browser. However, you can always go to the ESLint, go to user guide, and go on rules, and you'll be able to see all the possible rules, as well as if you go to configuring ESLint. You're going to see a list of all of the possible environments.

[06:40] Take a look here, specifying environments, browser, Node, CommonJS, ES6, worker, AMD. The ones that we all looked about. You can take a look at those. 

[06:49] Now, I've set the environment ES6 to be true, and now we should be able to run ESLint badcode. It doesn't tell us anything. Why is that? Because by default ESLint doesn't have any rules enabled. You have to turn on all the rules. 

[07:02] Rather than you having to go to user guide, rules and just wade through all of these possible rules, what happens is that there are handy presets out there for other people that have put together.

[07:15] There's one is the ESLint recommended. The way that you pick up someone else's preset is you say extends and you say ESLint recommended. Give that a save. 

[07:29] Now if we go back to our terminal and rerun that, there we go. Now it's going to tell us, reject is define but never used, unexpected console, and unexpected console.

[07:41] If we go back to our badcode here, you'll see on line seven we pass the reject, but we actually never use it because we only use resolve. I know, "Well, what's the point in passing that? It wasn't necessary for me," so I'm going to remove it, save it, rerun ESLint. 

[07:56] Now we only have two errors. Now, I've got the same error happening on line 17 and line 21. Right here I'm using console.log and on line 29, I'm also using console.log.

[08:10] It's telling me I shouldn't be using console but I'm saying, "It's fine that I'm using console, I know what I'm doing. I'll make sure that it take them out, or maybe I'll have another ESLint that that role will be set on development and not in production." 

[08:23] But if I want to turn that off, what I do is I go back to my eslintrc file. I make a rules here. Then we go ahead and set every single rule how we want it.

[08:35] How do you actually work with these rules? The rule is this one, no console. What I usually do is I'll go here and say, there we go, no console. Click through to it, and spend some time reading why this rule. 

[08:48] Don't just turn it off immediately because it's annoying and you think you're right. Maybe just spend some time and say, "Maybe I shouldn't be using this rule, or maybe I shouldn't be writing my code in this way. Why is this possibly bad?" 

[09:00] Read through why they think that maybe this rule should be turned on. It looks at some examples as to what you shouldn't be using, and then finally there is when not to use it.

[09:13] How do you turn it off if you don't like it? There's a couple ways you can turn it off. At the very high level there's three stages of rules. They can be off, they can be warning, or they can be error. Sometimes I like to turn things on just to warning, so I know that that possibly shouldn't be there. However, an error will go red.

[09:32] What we do is you take your rule here, no console, and we set it to either off, warn, or error. Or what I like to do is zero is off, one is warn, and two is the actual error. There's also the ability to pass options here. We'll look at that in just a second, but that's very basic.

[09:54] Let's say I want to turn it off entirely. I'm going to say rules, no console. What's that's doing is it's taking all the rules from the ESLint recommended, and then we're taking the no console and just applying our own. It's like CSS, where you have a base framework here and then you overwrite your own specific ones.

[10:12] Now if we go back and rerun ESLint you'll see that we get no actual errors here, because according to recommended and our one rule here, we have totally made things up. 

[10:24] However, if I look at this code right here, you'll know that there are a whole bunch of things that are bugging me here. First of all, what is this space here? Second of all, I have the spacing that's inconsistent with that, I have no space here where there should be one there.

[10:36] It should be catching more stylistic errors that I actually have, as well as things like why am I using var, let, and const all over the place, when I shouldn't be using var. Let tweets here is not being reassigned, so it shouldn't be a let, it shouldn't be a const. 

[10:52] There's all kinds of stuff, so in the next video what I'm going to do is look at the Airbnb default, which is a little bit more strict but will allow you to write much better code.