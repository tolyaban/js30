[00:00] [musique]

Wes Bos: [00:02] Nous avons trois façons de déclarer des variables en Javascript. Nous avons Var, que nous avons toujours utilisé. Maintenant, nous en avons deux nouveaux, qui sont let et const.

[00:11] Ces deux mot-clés ont quelques spécificités qui nous seront très utiles, mais nous avons tout d'abord besoin de faire un très, très, rapide retour sur le mot-clé Var afin de bien comprendre les avantages et différences entre let et const.

[00:24] Première chose que nous avons besoin de savoir à propos des variables déclarées avec Var est qu'on peut leur réaffecter une valeur. Vous pouvez aussi les mettre à jour. Nous allons afficher la largeur, la mettre à jour afin qu'elle soit à 200, puis nous afficherons à nouveau la largeur.

[00:38] Quand nous rafraîchissons, vous voyez que nous obtenons 100, et 200. Rien d'exceptionnel. Nous pouvons les mettre à jour. Ce que vous pouvez aussi faire, c'est mettre le mot-clé Var devant.

[00:45] Ce n'est pas quelque chose que vous voudriez faire, mais nous avons tous atteint ce stade où nous manquons de noms pour les variables et que nous utilisons accidentellement les mêmes. Ce qui arrivera ici est qu'il ne se passera rien de grave. Ca marche comme vous vous y attendiez, mais il ne vous dit rien pour avoir créé la même variable deux fois dans le même scope. Ce qu'il y a de particulier avec les variables Var est qu'elles peuvent être mises à jour ou redéfnies.

[01:08] La seconde chose que nous avons besoin de avoir à propos des variables Var est : quelle est leur portée. La portée signifie essentiellement : "Où ces variables sont-elle disponibles ?". Les variables Var ont une portée définie par les fonctions, ce qui signifie qu'elles sont seulement disponibles à l'intérieur de la fonction dans laquelle elles ont été créées. Si elles ne sont pas créées à l'intérieur d'une fonction, comme c'est le cas ici, elles ont une portée globale. Elles sont disponibles dans l'objet "window", ce qui explique ici pourquoi nous pouvons avoir accès à la largeur "width" dans les DevTools.

[01:34] Mais si je crée une fonction ici et que je mets ma variable "largeur" à l'intérieur, et affiche la largeur? Est-ce que ça va marcher ? Bien sûr, ça va marcher parce que cette largeur est disponible à l'intérieur de cette fonction.

[01:46] Si j'essayais également d'afficher la largeur après avoir défini la largeur ? Cela va-t-il marcher ? Ça ne marche pas. Pourquoi ça ne marche pas ? Parce que la largeur a une portée qui se limite à la fonction. C'est une variable locale à la fonction. Elle n'est pas accessible à l'extérieur des limites. J'aime bien imaginer que les accolades des fonctions sont des portes, et que ses variables ne peuvent pas aller au-delà. Elles sont en prison, [rires] si vous voulez.

[02:13] C'est une information importante à savoir pour nous. Ce que vous pourriez faire est "var width" là, et vous pourriez la mettre à jour. Ici, nous sommes en portée globale, et nous la mettons à jour. Ça devrait marcher.

[02:26] Généralement, vous ne voudriez pas faire ça. Vous voulez garder vos variables à l'intérieur de votre fonction. Si vous avez besoin d'une variable à l'extérieur de la fonction, vous la renvoyez et la stockez dans une autre variable. C'est quelque chose que nous avons besoin de comprendre à propos de la limite de portée des fonctions.

[02:38] Je vais vous montrer un cas où le périmètre de portée des fonctions nous piège. Supposons que nous avons une variable "âge" et que nous avons une condition "if". Nous voulons produire l'équivalent de cette âge en "nombre d'années chien". S'il est plus âgé que 12 ans, calculons l'âge en chien et affichons, "Vous avez x ans en chien."

[03:11] S'il est plus âgé que 12 ans, nous voulons juste l'afficher. J'utilise [inaudible] ici. Nous allons apprendre tout ceci dans la vidéo "Template Strings". Nous allons enregistrer, et ça marche.

[03:22] Ce qui est un peu marrant ici est que cette variable, pour l'âge en années chien, était juste une variable temporaire. J'avais juste besoin de ça très rapidement afin de calculer quelque chose et ensuite l'afficher, ou la stocker dans une chaîne de caractères.

[03:38] Et si j'allais dans ma console et que je cherchais à afficher la variable chien ? [surprise] Regardez, vous pouvez voir que la variable chien a fui en dehors de mon if et que c'est maintenant une variable globale. 

[03:50] Même si c'était une variable temporaire, dont j'avais l'utilité seulement à l'intérieur de ma condition if, parce que les variables Var ont une portée limitée par les fonctions -- il n'y a pas de fonction ici -- elles ne sont pas délimités. La portée de ma variable est l'objet "window", ce qui est un petit peu embêtant ici. C'est un des avantages d'utiliser les mot-clés let et const. Au lieu d'être délimitée par une fonction, la variable est délimitée par un bloc.

[04:19] Qu'est ce qu'un bloc ? Ici, c'est un bon exemple. A chaque accolade ouvrante et fermante, nous avons un bloc. Les fonctions sont également des blocs. Les variables auront toujours une portée limitée par les fonctions. Cependant, si on est à l'intérieur de cette fonction ou à l'intérieur d'un autre élément que vous avez, les variables seront disponibles à l'intérieur des accolades.

[04:41] Si je prends ma variable des années chien ici et la change en let, et que je rafraîchis, tout marche comme nous le voulons. Mais si je chercher à afficher ma variable ici, ça dit qu'elle n'est pas définie. Pourquoi ? Parce que je l'ai déclarée comme une variable avec le mot-clé let. Elle est seulement déclarée dans un bloc, et non une fonction, et les variables temporaires ne dépassent pas de leur périmètre.

[05:06] De manière similaire, nous pouvons aussi utiliser une variable const et ça marchera de la même façon. Si je cherche à accéder à ma variable chien, nous avons "Variable non définie." Let et const sont tout deux délimités par blocs et non plus par fonctions.

[05:22] Dans la prochaine vidéo, nous allons approfondir nos connaissances sur les variables en let et const.