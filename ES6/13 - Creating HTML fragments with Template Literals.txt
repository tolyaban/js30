[00:00] [music]

[00:02] Instructor: Another feature of template literals or template strings is the ability to do multiple lines without any funny business. What I mean by that is, the funny business is, previously we had to do things like text = you say hello there, and you want a new line. Say how are you...

[00:18] You see my text editor is freaking out here because I have entered onto a new line and we have to fix it by doing a forward slash and a forward slash and a semicolon there. That gets to be quite a task, to be able to do that.

[00:34] Instead, we can now use template strings. I'm going to say markup equals, and where I like to use these multiline strings is just when I'm creating HTML markup just as a string. I'm going to give myself two backticks here, and inside of that I'm just going to go ahead and mark up some of my HTML that I need here.

[00:54] I need a div with the class of person. Inside of that I want an h2 tag. Now, I want to go ahead and put the person's name right inside of the h2 tag, so we just use dollar sign, curly brackets, person.name. 

[01:07] Then maybe underneath that I would also like a span. I'm going to put these on their own lines here. I want a span with a class of job. Inside of that we'll say person.job, then below that we want a paragraph with a class of location. We can pop in the location here, person.city. We can also do the same thing with the bio. 

[01:32] You can see how this is so much nicer. We will get this white space here, but we don't really care too much about that because we're just creating HTML fragments.

[01:43] Now, I can take this string and go ahead and dump it into an existing element. I've just got a blank page right here, so there's nothing. The only existing element that we have on the page is the document.body, and then I'm going to set the inner HTML, but this could be any...You could use document.createElement, set the inner HTML, and then append that to the body, whatever you like. Same with markup. 

[02:04] When I refresh the page you see "Wes, web developer, Hamilton, Wes is a really cool guy." If I inspect that, you'll see it's all been processed as proper HTML without having to do any document.createElements. Pretty nice. 

[02:18] One other thing, let's just console.log this markup just to show you that the new lines are there. You can see that all of the new lines, all of the tabs and the spaces are included as part of that string.

[02:30] Another amazing feature of template strings is that you can nest them inside of each other. What does that mean? What if I have an array of dogs and I want to loop over and get myself a list item for each one. 

[02:40] Let's just say const markup equals, and we'll give ourselves a new line here, and of course we want a unordered list with the class of dogs, and inside of that I want a list item for each one. But I can't, I can't just do like dogs.name because that would be cheating and that's not really scalable. So how would I loop over every single one?

[03:07] How do you loop over things? We can nest template strings right inside of it. How do we do that? Let's take a look here, we can give ourselves a ${dogs}.map, and you can use an arrow function here, which is dog, and for each dog you want to return a string. Whoa.

[03:27] Here we are getting a template string inside of a template string, so when you go ahead and return that template string, we're going to return a list item, we're going to close that list item, and inside of that actual list item we are going to give the dog.name is and we're going to say how old they are in dog years. We'll  say dog.age times seven, that's how old you are in dog years.

[03:52] Now we've got all this markup here. Let's take a console.log, see where we're at. Snickers is 14, Hugo is 56, Sunny is 7. Now we have this comma here, how do you get rid of that? Well, map will return an array, we can simply just join it together with nothing, and that will just join it without the comma.

[04:13] Now we can go ahead and say document.body.inner html = markup, or whatever element you like to dump this markup into, and that's going to dump it right onto the page for us. That's a good example of, if you need looping inside of this, then you can use a map function. 

[04:32] Again, you could do this on their own lines if you prefer to do each on their own lines and indent it. This is just much more maintainable, to be able to read some HTML like this. You don't have to worry about your white space or anything else like that.

[04:47] Let's look at an example where we need an if statement inside of our template. This is taken straight from how you do if statements inside of a react render template, and that is with a ternary operator. 

[04:58] Here I've got a song, some data with a name and an artist. We always have a name of the song and the artist of the song, but sometimes we've got a featuring one. If there is a featuring, we need to say brackets, featuring Biggie Smalls. Let's code the first part first. We'll have a div with a of song, and inside of that is a paragraph, and inside of that we can give song.name m-song.artist.

[05:26] I've already set that to the body here, or whatever element you'd like, and give it a refresh, and we see "Dying to Live" Tupac. Our HTML is working fine. Do you see that? It looks kind of funny here if you look at it. We've got all of these white space, and that's because we've got all this white space here. But it really doesn't matter, because the white space is ignored as soon as it hits the HTML. 

[05:48] But, that said, what about when we want to have the featuring? If we have the featuring, we want to have a bracket, featuring song.featuring. Save, featuring Biggie Smalls.

[06:06] That works, but what if we delete this? Featuring undefined. If it's not there, we don't want the parentheses or the word "featuring," or anything there. A way we can get around that is by using a ternary operator. A ternary operator will say if this then that, otherwise nothing. 

[06:25] We'll say if there is a song.featuring, then we want to give ourselves some backticks with that whole string right in there. Otherwise, we'll just give ourselves nothing, two blank quotes. What that should do now, is featuring Biggie Smalls, but if we take it off entirely, the featuring is gone entirely. That's a nice little way to do an if statement right inside.

[06:51] The last couple of examples were pretty simple, but what happens when your data starts to get a little bit complex? You can see nesting, inside of nesting, inside of nesting, starts to get a little bit hairy and hard to maintain your code. What I like to do is create what I call a render function. I've sort of taken that from react, where we create separate components that will handle different complex data and different components in our markup.

[07:16] Here I've got the beer name and the beer brewery, and that's pulling into an h2 in a paragraph, and it's looking pretty good here. But what if I want to implement this array of keywords that's nested inside of the actual beer here? I could just go ahead and do the map right on one line, but I'd rather kick it off to a separate function.

[07:37] What I'm going to do is put a dollar curly brackets and say, render keywords. It's a function. I can just run a function inside of one of these, right inside of my template tag, and I'm going to pass it the beer.keywords. 

[07:51] Then I can go up here and make a function called render keywords. That's going to take in the keywords and it's going to return to us some backticks, and inside of that we give ourselves an unordered list, and then for each keyword I want to say keywords map. It's going to give us the keyword, each individual one, and that is going to return, again, another template string that has the key word inside of it.

[08:22] Now this function should just be able to pass it off. It's only one line, and it should be able to create the unordered list, and the list item, any other HTML that we need to have created inside of this. Get a refresh. Pale, cloudy, spice...Oh, what's this? We forgot to do the join after the map. Join it on nothing, and that will be gone. 

[08:43] Let's take a look at our HTML here. We've got our unordered list with all of the list items inside, and you can see that any time you need to render out a unordered list of keywords, whether it's tied to this beer or not, I can simply just call render keywords and get back the markup that I need for that.