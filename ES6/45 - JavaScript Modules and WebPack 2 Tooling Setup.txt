[00:00] [music]

Lecturer: [00:00] The way that we write JavaScript applications is changing. Previously, what we would do is have maybe a couple of script tags in the body of our document, and maybe load in jQuery in our own JavaScript, or maybe we had a build process where we would concatenate and minify all of JavaScript together.

[00:18] However, with ES6, it's starting to become popular to pick up what's called JavaScript modules. Now, this is not new to JavaScript, however, with ES6 we're seeing everybody sort of uptake it.

[00:28] What is a JavaScript module? It's essentially just a file with one or many functions inside of it and then you can make those functions available to other files. You can make those functions available to other applications. You can also use people's existing modules. Instead of using a script tag and having a whole bunch of global variables, what we do is we import things from existing modules.

[00:52] Right here, I've got three import statements where maybe I need a slug library. Instead of finding one and using a script tag, I did an npm install -- we'll look at how to do that -- and I import slug from slug.

[01:06] Maybe you're using a utility library, like Lodash, and you need to pull in a couple of the methods that you explicitly need here in a unique [indecipherable] shuffle. I'm just importing those two things. I'm cherry-picking them in.

[01:17] Maybe you're using a slider plug where you need to import Flickity, import it from the package that is called Flickity.

[01:25] That is JavaScript modules. We are going to dive into how this all works, the tooling of all it works, how we can create our own named exports versus default exports. It's a pretty big topic to cover, but I think this is really crucial to understanding how to write modern JavaScript.

[01:44] Everything we've been doing so far, we've been simply writing it in a HTML file and opening it up in the browser. That's because ES6 has fantastic support across all the browsers.

[01:53] The one thing where support is really lacking, and we're sort of seeing browser vendors look at how they're going to implement it, is ES6 modules. We do need some tooling in order to actually start using the syntax and using the idea of importing and exporting modules.

[02:09] What we need to do is, first, set up a package adjacent file, which is going to let us install our external dependencies from npm, and then we're also going to need to use Webpack, which is going to bundle up all of our JavaScript together.

[02:23] If I import a couple libraries, I export a couple things, and I have maybe seven or eight files, it's going to bundle it up into a single or multiple files for me.

[02:33] What we want to do here is...I am in the JavaScript modules and using npm folder. What I want to do is then create a second folder inside of that. I'm going to type M-K-D-I-R, mkdir. You can do this via your Winder OL.

[02:48] I'm going to say mkdir ES6 modules. I'm going to go into ES6 modules. Triple-check you are in the right folder. You should be in a file called ES6 modules. Again, I did not give you that. You should create that yourself.

[03:04] Then we need to start things off. Now, there are lots of ways to get modules. There is Bower and there's something called jspm. But the pretty standard way to do it and what has won out is called npm. You probably have stumbled upon npm before and that's what we're going to use to install all of our dependencies.

[03:25] What we need to do is first create ourselves an entry point. I like to call this app.js. I'll say touch, app.js. Let's see what we got. We just have a app.js file so far.

[03:39] Then we need to initialize an npm package.json, so you just say npm init. It's going to ask you a series of questions here in terms of what would you like to call it. You can go ahead and fill this out to be whatever you want.

[03:54] Really there is not any information that you need to put in so you can just hit Enter as you go on through.

[04:00] We're going to go back into that package.json. If you actually take a look here you'll see that our ES6 modules now has app.js and package.json file. If you open up package.json, you'll see that it just has some information about it.

[04:16] Why that is important is because this package that .json is going to save all of the references to the packages that we want to install.

[04:25] Let's go ahead and try and install a couple packages. We'll do npm install slug. That's a slug library that I like to use if you ever need slugs.

[04:33] Let's take a look. npm.im/slug.

[04:37] Just a library like this where you can import a slug library and then you simply just use it. Say "I love Unicode" and it will return to you these nice URL-friendly slugs. We'll say npm install slug, dash, dash, save. Go ahead and install that.

[04:53] What that is doing now...if you open up your package.json, you will see it change. There we go. We have dependencies added. Now we have slug and also you should see a node modules folder pop up. You don't really have to look inside of here, but what we need to know is that it installed a library called slug.

[05:12] I got a lot of emails with people asking me, "Why are there so many folders in here?" These other folders are just because the slug has dependencies of its own and these install in a flat fashion. Really, don't worry too, too much about what's inside of this node modules here.

[05:26] Let's go ahead install a couple more, npm install, Lodash and then let's also install Flickity at the same time, dash, dash, save

[05:38] Now, if we go back to our dependencies you see we have Flickity, Lodash and slug.

[05:42] If you're using jQuery or any other library like this, pretty much every single JavaScript library is available on npm. You can install it like this. I'm going to close this node modules folder.

[05:53] One thing I want to tell you is if you ever accidentally or on purpose delete the node modules folder...I'll often delete the node modules folder on purpose, because it is fairly large and I run out of computer space. If you ever delete it, you simply just need to type npm install once more. What that does is that it will read your dependencies in your package at json file.

[06:12] It will say, "Oh, I need to download Flickity, Lodash and slug for it." See how it's going to get it.

[06:18] You never need to check this node models folder and to get...you never really need to hang on to it unless you're going on a plane and need offline access. You can always type npm install to get that again.

[06:30] Go ahead and install a couple more libraries that...something that you would use.

[06:33] I want you to try this with code that you would probably use every day. If you use jQuery from day to day, do npm install, jQuery, dash, dash, save. I also use one called Insane which is a really nice HTML sanitization library, so npm, install Insane, dash, dash, save.

[06:51] Now when we head over to here, you'll see we have Insane and jQuery being loaded on up.

[06:57] Now we want to go to our app.js file, and write some import statements.

[07:02] Let's import just one of the methods from Lodash, so U-N-I-Q from Lodash. We're going to go over the syntax here. Essentially what I'm doing is that I'm importing a named export. What is that? We'll learn all about it, but you have to put curly brackets around it.

[07:20] Then also let's also import Insane from the Insane library. Then let's go over to our terminal and install one called JSONP, npm install JSONP, dash, dash, save. The reason why I want to show you that is because we looked at fetch earlier, but fetch doesn't work with JSONP API.

[07:40] If you ever want to work with JSONP API, I can't even say it, then you need to install this really nice small package called JSONP. Maybe let's import JSONP from JSONP package.

[07:54] Now we have imported all of these things. We need to create an HTML file to load in as app.js. Create a new file, I'm going to call it index.html. Give ourselves some HTML in there.

[08:07] We're going to call it Js modules. We give ourselves a script tag, which will give us...let's try app.js.

[08:16] Now if I open that up in my browser and take a look at my dev tools, we're going to get this error, unexpected token import on the first line. It doesn't know how to actually handle this import stuff because that's a one piece of ES6 that has not yet been implemented.

[08:31] What we need to do is we need to use Webpack that's going to bundle it all together for us. This a little bit of a task to get up and running, but it's generally one thing that you do at the start of your project and you're golden. If you have multiple projects, you can re-use this set up. We'll go through it together.

[08:47] You can find boiler plates online, however, they are so confusing, and it's a really overwhelming space. I really want to make sure that you understand what's happening with the module bundling here with Webpack. First things that we need to do is install some dependencies here. There's a couple.

[09:04] I'm going to be using Webpack 2 right now because that's going to come out pretty soon. It's not yet available. We had to do npm install Webpack app beta. The way you can check if you need that app beta any longer is you can go to npm.im/webpack, and then check the version of Webpack. See the current one for me is 1.13.1.

[09:27] If that says 2.0for you, you simply just need to install Webpack. If it still says one point something, we want to install the beta of Webpack because there's no sense in really learning Webpack 1 right now when we're trying to look a little bit future-friendly here. Webpack app beta, and we'll say dash, dash, save, dev.

[09:46] The reason why we're saying dash, dash, save, dev instead of just dash, dash, save is because this is just a tool for building it. It's not part of our application. It's just a development tool.

[09:56] We're going to go and install that. Let's head over to our package at JSON. We should see a secondary item being added here called dev dependencies.

[10:04] There we go. Popped up, Webpack, this one is beta 15, it will probably a more recent version when you actually get around to doing the series.

[10:14] Then we also need a couple things that's going to help us convert our code to ES5. Now we haven't talked about Babel, but the long and short of it right now is that it will take your ES6 code and convert it to the equivalent ES5 code and make it work in all of the browsers.

[10:31] We will go much more into it, but this is the point when we actually integrate Babel into our build system so that it will work on all of our browsers.

[10:39] We need to install a whole bunch of Babel add-ons and I've included the instructions on ES6 module instructions so you don't have to type it every single time. We already did Webpack install app beta.

[10:50] We also need this thing called a Babel loader, we need the Babel core, and then we need this thing, Babel preset ES2015 Native modules. What that does is it's going to convert all of our code from ES6 or ES2015 down to ES5, but this Native modules version is going to skip converting them to this older module version called common Js, because Webpack 2 is able to handle Native modules.

[11:15] Now, if top of your head just blew off after everything I said don't worry about it. You'll catch on to it. Just take this one npm install line, pop it into here, and let that install. You can check if it worked if you go to your package at JSON and you see your dev dependencies is now Babel core, loader, preset and Webpack all installed.

[11:34] Finally, we need to create a Webpack file that's actually going to hold all the config for this, so we will say touch, Webpack, dot, config, dot Js and you can open that up and we need to import Webpack.

[11:49] Const Webpack equals require Webpack. Now you might be saying, "Why are we using require here." That's common Js if you ever heard of that, but the problem here is that our Webpack config actually isn't going to use ES6 imports because node doesn't support that just yet.

[12:04] Then we will also need a variable for the environment and this is going to help us do production builds and development builds and the production builds will be much smaller.

[12:15] So it's Const node in equals. All right, now what we need to do is create a module dot exports and that is going to be an object and inside of this module exports we have a couple things.

[12:30] We have a dev tool, which is going to give us something called source maps, source dash map. We have an entry point. So with web pack you have an entry point it essentially says where do you want to start your application. We are going to start in app.js.

[12:47] You see the file name is app.js, and then the output is where do you wish for it to go. File name is going to be, I'm going to make a folder called Build, and make it called bundle.js. You might see I already have it here, that's because I made it once to test it for the screen cast.

[13:11] Then we have a module inside of here which has a loaders array. Loaders are essentially how should I handle specific types of files because Webpack is just a beast. You can use it for absolutely everything. It can pretty much do everything under the sun.

[13:30] One of the loaders that we are going to do is we are going to take all of our JavaScript files and we are going to run it through Babel with our specific plug-ins. The first loader is going to be an object and the way that you tell it the entry point is that if it is a .js file.

[13:50] We'll say test for a bit of a funky [indecipherable] here .js and it ends with Js, by the way if you don't feel like typing this you can just scroll on to ES6 module instructions and just copy and paste this entire thing.

[14:06] If you'd like to hear me explain it all the way through then stick around. We want to exclude the node modules directory. We don't want it to run against the entire node modules directory.

[14:18] The loader that we are going to run this JavaScript file through is Babel or Babel dash core. That's going to convert it all to ES5 and then there is a query which will allow us to set some presets with JavaScript. We want the ES2015 dash native dash modules.

[14:37] Again the reason I am using Native modules here is because Webpack 2 doesn't need them converted to common Js files. Webpack 2 knows how to handle ES6 modules, which is really, really nice.

[14:49] So, that is my module up and running. The final is, let's go down here, we need some plug-ins that are going to actually handle that. Plug-ins, the plug-ins, there is going to be a couple of them right here. Let's just leave comments. So like, Uglify Js, that's just going to compress our JavaScript so it is nice and small. Then we have the environment plug-in which will set the actual environment inside of that.

[15:18] Uglify Js is new Webpack.optimize.uglify Js plug-in. That takes the object of Uglify JS properties compress is going to be warnings. Output is going to have comments false and source maps is going to be true.

[15:43] That's the Webpack 1 and then we have this environment plug-in, which is another new webpack.define plug in. That will take an object, process is the node mv. Going to be set to JSON.Stringify the node and variable we have created there.

[16:04] Essentially what that does is it passes the environment variable to this code and plug-ins like Uglify are going to be able to know if they should remove certain things or not depending on what environment we are actually in.

[16:16] Lets just do a quick look over. Looks like I forgot a comma there. Any other errors? Nope. Looking pretty good.

[16:24] Third step what we want to do in order to run Webpack we need to run it. We could run it from the command line. We could install Webpack globally. An even nicer way is to use what is called and npm script.

[16:37] If you head on over to your package.json file and scroll up to where it says scripts, you will see that we have only one that's called "Test." You can delete that that's for running tests. So delete that entirely. We are going to create a script called Build and that Build is going to be set to the command Webpack and we are going to pass it just two flags. Progress and watch.

[17:02] Now, without having to globally install Webpack we should be able to say npm, run, build. We say Run and Build is the name of the actual script that we have here. Let's run it and see if we have any errors, we might. Beautiful!

[17:16] So what happened here is that it created us a Build file which is bundle.js. One thing is I'm not seeing my source map show up. Let me double check my Webpack config.

[17:29] I forgot a capital M on the Uglify so Uglify Js was stripping them back out. So if I quit that and rerun npm run build, it then kick outs a nice tidy bundle as well as a source map for us.

[17:44] If we go to our index.html, change this app.js to _build/bundle.js. Why? Because it's _build bundle.js.

[17:57] If we go to our app.js and try to use these things, so let's just say, const ages = 1, 1, 4, 52, 12, 4. I have these ages here, and I want to just get the unique versions of them.

[18:16] Let's just say, console.log unique ages. That should work. See how when I hit save, it reruns this Webpack bundle here?

[18:26] If we open up our index.html in our browser and open up our console here, you now see unique array. It tells us that we wrote that on app.js, on line 7.

[18:39] That was a very basic getting up-and-running with Webpack. I know it was a little bit of a slog to get through some of that. It's the tooling is a little bit tough right now, but if you get the hang of it, it's definitely worth implementing into your workflow.