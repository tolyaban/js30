[00:00] [music]

Wes: [00:02] These last couple examples we've been creating HTML and inserting it right into the DOM. If you have any sort of security background and you're probably screaming, "Wes, you must sanitize that data before you put it into the DOM."

[00:15] If you don't know what that means, essentially when you get data from a user, whenever you're displaying data from a user, you must make sure that the user isn't doing any Sneaky Pete stuff on you, and trying to maybe insert an iframe, or an image, or to do an XSS. 

[00:33] Here I've got an example. Let's assume I took this first name in the about me. I got that from a database, or an API or something like that, and the user had this saved in their database. 

[00:43] They said, "I love to do evil," and they inserted an image to Unsplash, which is allowed. You can insert an image into your bio, no problem, but they do the Sneaky Pete thing here where they say, "onload equals alert, you got hacked," so when this image loads, run this JavaScript. 

[00:59] That is the big no-no. You cannot let your users run JavaScript on your page because then they could drain your bank account, or delete your thing, or post as you. They could do anything.

[01:09] Imagine if you let someone run JavaScript on Facebook. You could unfriend everyone, or you could look at all of their messages, or send nasty messages on their behalf. 

[01:19] Here I've taken the about me and I've just popped it into HTML and then I've set it into our bio. I'm taking it, carte blanche, putting it in, I refresh, and I get this message, "You got hacked."

[01:31] That is what's called an XSS, across site scripting, where we let someone else who inputted this data run JavaScript on our page. That's really dangerous. 

[01:40] The solution to this is to sanitize your HTML. That's another place where you could use the tag template. In creating all this HTML here, I have all kinds of inputs from a user. But before I put it into my HTML, it's probably a good idea to run it through a sanitizer. 

[01:59] I've loaded it in this library called DOMPurify. It's a pretty good little library that we use to sanitize. You can have all kinds of options in here in terms of what tags are allowed and aren't allowed. There's all kinds of sanitize libraries here.

[02:17] You could make a sanitized tag template and use this library inside of it. I'm going to show you how to do that now. We say function sanitize, and again that sanitize function is going to take in the strings. It's going to also take in the values. 

[02:36] Let's go and do a quick reduce function, so return, reduce. It takes in a function and what we start with, and our function is going to be an arrow function that gives us the, I'm going to say prev, next. 

[02:53] Previous is, what was the last iteration. Next is, what's the current iteration, or index, what is the index there. Then we're just going to return a string that tacks all of those things together. We've got prev. We've got the next. We've got values.

[03:13] I or nothing. You need to excuse that this is wrapping on to the next line. If I zoom out, you'll see that's just one quick little line there. 

[03:20] Now, let's take a look here. We take the sanitize -- you have to spell it right -- put it in front, tag that template. Reduce is not a function. Obviously we have to say strings.reduce. There we go.

[03:40] We still have, "you got hacked" because we have not yet done that. But instead, what we can do is say const dirty, and then this string right here is dirty because it still has it's onload, or iframes, or any of the other nasty stuff people are trying to do. 

[03:55] But you can return...We'll use this library here. It's called DOMPurify.sanitize. We'll sanitize the dirty HTML. Now when I return that, let's look at it before. This is onload you got hacked. Now when I refresh, see that unload has been stripped out, along with any other nasty stuff. 

[04:16] Obviously, you could do this just with a function as well. You could say DOMPurify.sanitize and just wrap in there. I'm showing you how you could possibly create a tag template so that any time you are creating HTML in, I've put it here, but what if they put it in there? 

[04:31] We could also put it on our HTML. You can put this wherever you need to quickly sanitize something. Even if you're using variables or not, it's going to sanitize it for you.