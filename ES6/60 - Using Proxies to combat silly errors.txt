[00:00] [music]

[00:02] Man: Another really great use case for proxies is when you are building a library that other developers are going to use, you need to implement some sort of ergonomics so that they are going to use it with the greatest ease possible. This is something that I run into all the time.

[00:17] It drives me bonkers that, when you have a map and you want to set the longitude, people have a hard time deciding on if the property's going to be longitude, or they're going to spell it wrong, or you use L-O-N-G or L-O-N. Finally at the end of the day they realize "OK, it's LNG," but that might be half an hour of debugging to realize that's such a silly mistake.

[00:38] Same thing goes with CamelCasing or something like that where you have a property like ID. People don't know if identification should be CamelCased -- it shouldn't -- or if it's all uppercase -- it shouldn't -- or if it's just lower case. Something like that, so it really is helpful when you're making something to check.

[00:56] Are people making any of these common mistakes, or is someone setting a property where there is an existing property already that is in a different case like that? Then maybe we should actually warn them. Let's take an example with this. I'm going to delete this, and we're going to make a new safety object.

[01:14] I'm going to start with an object here, and we'll put an ID of 100 in there. Then we also need a handler, so we'll create the handler and call it "Safe handler". It's an object. We'll take that object and pop it into here. Now the way we're going to test this is we're going to go down here and say "safety.id=200."

[01:36] If someone tries to change the ID and they're using a different case than what we initially intended, then we should throw an error in actually one of them. We only need to trap the set here. The get doesn't really matter to us, and neither do any of the other traps. We just want the set value, which will take a target, a name, and a value.

[02:01] Now here what we want to do is make a list of like keys, so we're going to make them all lower case. We can use "object at keys" to get a list of all of the keys off of the current object. Then I'm just going to find all of the like keys that are equal to the one that the person is looking for but in lowercase. It's equal to name.2 lower case.

[02:30] The reason I did two lower case on both of them is so that we have apples to apples here, and we're not trying to check against all of the other ones. If someone passes Wes and our key is Wes, then we know that there's a difference, or if someone passes Wes and our key is Wes, you know that there's a difference.

[02:51] That just covers every single possible use case for us if we normalize them all to lower case here. Now we say, "If there is no name in the target, if they are trying to set a new property, which setting uppercase ID would be a new property because the existing property is lowercase ID, and there is a like key. There is a key that is like ID, but it's in uppercase. That's what this did right here.

[03:22] We checked for that. If that's the case, then we just want to throw a new error. We'll tell them, "Oops. Looks like we already have a property but with a case of..." You use template strings to put the name in there, like he. Otherwise, if that doesn't happen, then we'll just go along with our lives and set the key for them because that's what we actually wanted. Good.

[03:57] Now I should be able to refresh this, and we get an error. Oops. Looks like we already have an ID property but with the case of lower case ID. Let's try it again. We'll say, "safety.name= Wes". That works just fine. Then if I try to update the name to Wesley, but maybe I spell it with a capital N for whatever reason, it's going to yell at me.

"[04:25] Looks like we already have a name property but with a case of name." It's not going to go through and update it. You can really help out other developers that are using it. By thinking ahead of these things, you can cut down on get-hub issues, emails, and all that kind of stuff if you make your proxies a little bit more resilient.