[00:00] [music]

[00:02] Instructor: ES6 classes can also be extended, and to show you that, let's make an animal class that will take in a name. Then we'll also have a couple properties, this.thirst 100 and this.belly if they want to eat something. We'll start with an empty belly when they eat. 

[00:19] Then we'll have a drink method, which will take the thirst down by 10, and we'll also have an eat method, which takes in a food, this.belly.push food. Let us return this.belly in case we need that value when we're calling this.eat.

[00:43] Now, that is an animal class, where it's just any animal drinks and eats. Any animal has thirst and has a belly that things can go into in. We can make an animal off of that class, like a rhino. 

[01:00] New animal, and the rhino's name is Rhiny, and that should work. We'll look at the rhino. Good. Then we also have rhino.eat a burger, because that's what rhinos eat, and rhino can also eat some leaves, and it can also eat a zebra. Cool, that's working for us. We'll double check rhino.drink as well. Good, as a rhino drinks, the thirst goes down.

[01:39] That is an example of a base class that we have here. It really works on its own. However, sometimes you want to get a little more specific, like what if we had a dog? Dogs also bark. 

[01:51] How do I add that? Do we do if this is the dog, then not...No, what we'll do is we'll extend this class of animal and create a more specific class called dog, so class dog extends animal. Inside of that, we still have a constructor.

[02:14] When we make a new one, let's show you how we're going to make one. We're going to say const Snickers equals a new dog, and we are going to pass the name of the dog, but also the breed, because that's some information we also want to stick along with each dog. 

[02:27] It takes in a name and also takes in a breed. You may think we'll do the standard this.name = name and this.breed = breed. Let's see how that works.

[02:44] We get an error here. Line 27, this is not defined. Why is this is not defined? It's inside a method here. Shouldn't it be bound? 

[02:55] The problem here is that when you create a dog it is, in turn, extending an animal, so we need to create an animal before we can create a dog. 

[03:07] How do we do that? We call what's called super. When I first was learning how to do this stuff, it was really confusing to me. I was like, "What does super mean? I don't really understand that." Super means just call the thing that you are extending, first. We first need to create an animal before we can layer on our additional stuff. 

[03:26] Simply, all we do is we say super, and that's going to create the animal. However, what does super need? Super needs a name. We're essentially just calling animal, like that, but the keyword super will call whatever you are extending, and it looks like it needs a name, so we'll pass in that name variable to them. 

[03:47] We don't need this.name anymore, because this.name is going to get set up here, as well as thirst and belly and drink and eat, but we do set this.breed. Let's try that out now.

[04:00] If we have Snickers...Oh, very nice, Snickers already has a belly. You can see the breed that we just added, the name and the thirst. You can see that it has been created off of the prototype of animal.

[04:15] Now, we can also add our own methods on top of that, like bark. We can do something like console.log bark bark. A dog snickers.bark works just fine. But what about snickers.eat? What does he like to eat? Plastic we find on the ground. Sounds good. Burgers. 

[04:38] All of the methods that we defined on the initial animal have been inherited because we extended the animal. Same things go if you were to change any of these prototypes on animal, they would filter on down to dog, and filter on down to Snickers where we actually created it.

[04:55] That is extending classes based off of another. Generally, the rule of thumb I've heard is don't go deeper than two or three, because you can imagine how this would start to get hellish as you extend and extend and extend away. 

[05:07] One other thing you can do is you can actually extend native things, like the array. We'll take a look at that next video.

[05:12] [music]