[00:00] [music]

Wes Bos: [00:03] Destructuring also works with arrays of...first a joke. Why did the developer leave his job? Because he wanted "arrays."[laughs] Terrible. 

[00:14] Now we need to talk about destructuring with arrays. Sometimes you have some data where it's based on its index value. You want to get the first, the second and the third thing out.

[00:24] Where you might be able to say 'const name = details', so the first one. You could say 'const', the D is 'details'. The second one, you get the point what I'm doing here. That's no way to live your life. 

[00:39] What we can do is use destructuring, where we can say 'const', and instead of using curly brackets -- because when you pull from an object, you use curly brackets to destructure. When you pull from an array, you use square brackets to destructure. 

[00:53] Similarly, we're going to learn about maps and sets. When you pull from a map, you'll use curly brackets. When you pull from a set, you'll use square brackets. 

[01:00] We will say '[name, ID, website] = details'. That's just going to take the first, the second, and the third thing, and make us a whole bunch of variables.

[01:13] 'Console.log(name, ID, website)', see what we got, "Wes Bos 1 2 3 wesbos.com" Cool. That is very helpful when you have index-based stuff. It could also be helpful when you have a comma-separated list or string. Let's say we're given some data in a string that looks like this. We have 'Basketball', 'Sports', '90201' and '23'.

[01:35] That's the item name, the item category, the item SKU, and the item inventory left on hand. You say, "Thanks for the data, but that's just a string. That's not really helping me out." We do know that one thing that we can do if the data is perfectly separated by some sort of separator is we could say data.split it based on some sort of splitter, right here.

[01:57] Then we've got a good array here. Then you know that you can also destructure an array. Let's say 'const', let's just destructure that baby right away. '[item name, category, SKU, inventory] = data.split'. Why? This is going to return in array right here, and then just immediately we're going to destructure that array into its own four variables that we have here.

[02:27] If I console log those variable, we should see "Basketball Sports 90210 23". Good. I'm really happy with that. One question, though, is what happens if the data is not great, and you have some extra stuff on here, like 'Wes' and 'Bos' and 'cool'? 

[02:44] Three extra items, what happens to them when you destructure something that is not the same length as the actual array? Well, nothing happens, because it will just throw those extra ones out. 

[02:58] Watch, if I go ahead and console log all of these again, you'll see that they still work. Then there are not variables to get these last ones, because I did not destructure them. Sometimes you do want to get the rest of them. I say "the rest" of them, because there's this thing in ES6.

[03:17] We're going to learn a little bit more about in a future video. There is a helpful use case in destructuring with using the rest. Let's say I have a team, and I want to know who's the captain, who's he assisting captain, and who is the rest of the actual team? I'm going to make myself a quick array here.

[03:37] I've got a list of names here. 'Wes' is the 'captain', 'Harry' is the 'assistant captain', and then the rest of the team is just going to be part of the team. How would you destructure that into Captain, Harry and then the rest? We say 'const [captain, assistant, ...]', and then we do... 

[03:57] Ideally you want to say team. Let's just do that ' = team', or not team. I already used that variable. We'll call them '[..., players] = team. Let's see what that gives us. "Captain is Wes." Assistant is not defined because I don't know how to spell assistant...is Harry. Then what are 'players'? "Sarah". 'Sara' is not the only 'player', there's also 'Keegan' and 'Riker'. How would we get them on?

[04:25] We use what's called the 'rest operator', and it does exactly what it says. It just gives you the rest of them. Let's take a look now. Where's 'players'? 'Players' is an array of whatever's left. 

[04:38] Sometimes you want to grab the first, the second, and the third, and then you just want to bundle whatever else is on the end of that array into the rest of the array. That is where you can use the 'rest operator'. 

[04:49] We're going to talk much more about this. You probably may also have heard of this 'spread operator' which looks exactly the same. We'll dive into that in future videos.