[00:00] [musique]

Instructeur: [00:02] Vous pouvez probablement voir où let et const nous serons utiles. Là où nous avons besoin de délimiter la portée de notre variable à un bloc, ou quand nous voulons rendre une variable impossible à modifier par qui que ce soit, par accident ou intentionnellement.

[00:12] Regardons quelques exemples pratiques d'utilisation. Le premier remplace le IFFE. Je ne sais pas si vous en avez entendu parler, mais ça a été inventé par Ben Alman en 2010. Ça s'appelle "Immediately-Invoked Function Expression". Il s'agit pour une fonction de s'exécuter elle-même immédiatement, et cela créé un périmètre où rien ne va déborder dans le périmètre parent. Dans notre cas, rien ne pas déborder vers la portée globale du "window".

[00:43] Si j'ai une variable, juste une variable var, name = Wes. Je rafraîchis et maintenant j'affiche "name". Ça marche et c'est OK pour la démonstration ici. Ce que vous pourriez ne pas savoir est que "window" a un attribut "name", dont on a besoin quand nous avons une fenêtre qui en ouvre une autre. C'est quelque chose qu'une partie tierce JavaScript a besoin, afin de fonctionner, ou peut-être que quelqu'un d'autre a une variable avec le même nom, et vous l'écrasez accidentellement, et ça commence à être un peu le bazar.

[01:15] Pour réparer ça, vous pouvez utiliser cette chose appelée IFFE, qui est une fonction qui s'exécute immédiatement, et vous mettez vos variables à l'intérieur. Ces variables ont maintenant une portée définie par les limites de cette fonction ici, parce que les variables var sont définies pour une fonction donnée, et qu'elles ne sont pas disponibles dans la portée globale.

[01:34] J'écris "name" ici, et elle n'est pas non définie, c'est juste vide parce que c'est une propriété qui existe dans l'objet "window" nativement en JavaScript. Si j'avais besoin d'y accéder, évidemment, j'aurais à effectuer mon affichage à l'intérieur, mais la chose importante à retenir est que ça ne déborde plus vers la portée globale.

[01:50] Avec les variables let et const, nous n'avons même pas besoin d'une fonction pour que nos variables aient leur portée limitée. Pourquoi, parce que let et const ont une portée par les blocs. C'est tout ce dont vous avez besoin de faire, nous ramenons ça ici et on en fait une variable const. Assurons-nous d'avoir encore comme portée la portée globale. Entrez le nom, et voilà. Nous avons "Wes".

[02:09] Mais si j'ouvrais et fermais simplement une paire d'accolades, ce qui en fait un bloc, maintenant on aura une portée limitée par le bloc. Rafraîchissez-ça, rentrez le nom, vous obtenez encore la paire de guillements. Si j'écris un console.log(name) à l'intérieur, ça me donne "Wes".

[02:26] Pas mal. On n'a dorénavant plus besoin de tout ce IFFE. Vous utilisez let et const parce qu'ils vont être limités par les blocs.

[02:33] L'autre problème résolu par l'utilisation de let et const est notre boucle for. C'est quelque chose que vous avez probablement rencontré avec votre boucle for classique. Maintenant, je vais juste tenter de faire console.log(i), et nous devrions voir que nous avons zéro jusqu'à neuf.

[02:48] Il y a deux problèmes qui surviennent ici. Premièrement, si je rentre "i" dans la console, vous voyez que ça vaut 10. Nous avons cette variable qui a débordée de sa portée et qui est maintenant soit dans le window, soit dans la portée parente, ce qui n'est pas vraiment ce que l'on veut. C'est juste une variable temporaire dont nous avons besoin à l'intérieur de notre boucle.

[03:08] Deuxièmement, supposons que vous voulez faire quelque chose à l'intérieur de cette boucle. Peut-être que vous avez quelque chose qui va s'exécuter après un certain laps de temps, une requête AJAX, ou faire un setTimeout(). Allons-y pour le setTimeout(). Nous avons une fonction ici et cette fonction va s'exécuter après une seconde.

[03:30] Après une seconde, faisons un console.log, le nombre est ... On va mettre la variable i à l'intérieur. Ça va s'exécuter après une seconde. C'est bizarre. Après une seconde, ils sont tous à 10. La raison pour laquelle nous avons ça est parce que, juste ici, console.log(i), va s'exécuter immédiatement et référencer i, peu importe ce que i est. Ceci s'exécute immédiatement au console log lui-même.

[03:59] Cependant, après une seconde, la boucle entière a déjà traversé toutes les itérations qu'il devait faire et la variable i, ici, est écrasée à chaque fois. Le problème avec ça est que, le temps que le premier setTimeout() s'exécute, la variable i est déjà à 10, et nous n'avons aucun moyen d'en garder la trace.

[04:20] De manière similaire, si vous avez une requête AJAX où vous bouclez sur les variables, il n'y a aucun moyen efficace à part en utilisant IFFE pour référencer ce que la variable i était au temps d'exécution, et non à l'instant actuel.

[04:34] Un moyen rapide de contourner ce problème est de juste changer var par let. Qu'est ce qu'on sait à propos de let ? Let a une portée limitée par son bloc. Regardez ! C'est l'étendue du bloc, alors nos variables vont maintenant n'être disponibles qu'ici. Je réexécute ceci. Voilà. Après une seconde, de zéro à neuf. Nous n'obtenons pas 10, 10 fois. Nous obtenons la variable telle qu'elle est à chaque fois.

[04:59] Vous ne pouvez pas utiliser un const pour ça parce qu'il va s'écraser lui-même. Vous ne pouvez pas réaffecter la même variable deux fois. Quand nous utilisons let, ça va délimiter la portée de cette variable i à l'intérieur de nos accolades.